// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/libs/data/params/filtering_params.proto (package vklink.data.params, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Combinator } from "../../common/enums/combinator_pb";
import { Operator } from "../../common/enums/operator_pb";

/**
 * @generated from message vklink.data.params.FilterRule
 */
export class FilterRule extends Message<FilterRule> {
  /**
   * @generated from field: bool not = 1;
   */
  not = false;

  /**
   * @generated from field: vklink.grpc.enums.Combinator combinator = 2;
   */
  combinator = Combinator.UNSPECIFIED;

  /**
   * @generated from field: repeated vklink.data.params.FilterRule rules = 3;
   */
  rules: FilterRule[] = [];

  /**
   * @generated from field: string field = 4;
   */
  field = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  /**
   * @generated from field: vklink.grpc.enums.Operator operator = 6;
   */
  operator = Operator.UNSPECIFIED;

  constructor(data?: PartialMessage<FilterRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.data.params.FilterRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "not", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "combinator", kind: "enum", T: proto3.getEnumType(Combinator) },
    { no: 3, name: "rules", kind: "message", T: FilterRule, repeated: true },
    { no: 4, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "operator", kind: "enum", T: proto3.getEnumType(Operator) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterRule {
    return new FilterRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterRule {
    return new FilterRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterRule {
    return new FilterRule().fromJsonString(jsonString, options);
  }

  static equals(a: FilterRule | PlainMessage<FilterRule> | undefined, b: FilterRule | PlainMessage<FilterRule> | undefined): boolean {
    return proto3.util.equals(FilterRule, a, b);
  }
}

/**
 * @generated from message vklink.data.params.FilteringParams
 */
export class FilteringParams extends Message<FilteringParams> {
  /**
   * @generated from field: bool not = 1;
   */
  not = false;

  /**
   * @generated from field: vklink.grpc.enums.Combinator combinator = 2;
   */
  combinator = Combinator.UNSPECIFIED;

  /**
   * @generated from field: repeated vklink.data.params.FilterRule rules = 3;
   */
  rules: FilterRule[] = [];

  constructor(data?: PartialMessage<FilteringParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.data.params.FilteringParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "not", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "combinator", kind: "enum", T: proto3.getEnumType(Combinator) },
    { no: 3, name: "rules", kind: "message", T: FilterRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilteringParams {
    return new FilteringParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilteringParams {
    return new FilteringParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilteringParams {
    return new FilteringParams().fromJsonString(jsonString, options);
  }

  static equals(a: FilteringParams | PlainMessage<FilteringParams> | undefined, b: FilteringParams | PlainMessage<FilteringParams> | undefined): boolean {
    return proto3.util.equals(FilteringParams, a, b);
  }
}

