// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/libs/protobuf/decimal_value.proto (package vklink.protobuf, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Example: 12345.6789 -> { units = 12345, nanos = 678900000 }
 *
 * @generated from message vklink.protobuf.DecimalValue
 */
export class DecimalValue extends Message<DecimalValue> {
  /**
   * Whole units part of the amount
   *
   * @generated from field: int64 units = 1;
   */
  units = protoInt64.zero;

  /**
   * Nano units of the amount (10^-9)
   * Must be same sign as units
   *
   * @generated from field: sfixed32 nanos = 2;
   */
  nanos = 0;

  constructor(data?: PartialMessage<DecimalValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.protobuf.DecimalValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "nanos", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecimalValue {
    return new DecimalValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecimalValue {
    return new DecimalValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecimalValue {
    return new DecimalValue().fromJsonString(jsonString, options);
  }

  static equals(a: DecimalValue | PlainMessage<DecimalValue> | undefined, b: DecimalValue | PlainMessage<DecimalValue> | undefined): boolean {
    return proto3.util.equals(DecimalValue, a, b);
  }
}

