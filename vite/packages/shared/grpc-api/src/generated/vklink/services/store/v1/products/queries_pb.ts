// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/store/v1/products/queries.proto (package vklink.store.api.v1.products.queries, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { BoolValue, Message, proto3, StringValue } from "@bufbuild/protobuf";
import { FilteringParams } from "../../../../libs/data/params/filtering_params_pb";
import { SortingParams } from "../../../../libs/data/params/sorting_params_pb";
import { PagingParams } from "../../../../libs/data/params/paging_params_pb";

/**
 * @generated from message vklink.store.api.v1.products.queries.OrderedProductParams
 */
export class OrderedProductParams extends Message<OrderedProductParams> {
  /**
   * @generated from field: string productId = 1;
   */
  productId = "";

  /**
   * @generated from field: google.protobuf.StringValue variantId = 2;
   */
  variantId?: string;

  constructor(data?: PartialMessage<OrderedProductParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.OrderedProductParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variantId", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderedProductParams {
    return new OrderedProductParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderedProductParams {
    return new OrderedProductParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderedProductParams {
    return new OrderedProductParams().fromJsonString(jsonString, options);
  }

  static equals(a: OrderedProductParams | PlainMessage<OrderedProductParams> | undefined, b: OrderedProductParams | PlainMessage<OrderedProductParams> | undefined): boolean {
    return proto3.util.equals(OrderedProductParams, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetOrderedProductsQuery
 */
export class GetOrderedProductsQuery extends Message<GetOrderedProductsQuery> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.queries.OrderedProductParams items = 1;
   */
  items: OrderedProductParams[] = [];

  constructor(data?: PartialMessage<GetOrderedProductsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetOrderedProductsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: OrderedProductParams, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderedProductsQuery {
    return new GetOrderedProductsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderedProductsQuery {
    return new GetOrderedProductsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderedProductsQuery {
    return new GetOrderedProductsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderedProductsQuery | PlainMessage<GetOrderedProductsQuery> | undefined, b: GetOrderedProductsQuery | PlainMessage<GetOrderedProductsQuery> | undefined): boolean {
    return proto3.util.equals(GetOrderedProductsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.FindProductByIdQuery
 */
export class FindProductByIdQuery extends Message<FindProductByIdQuery> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<FindProductByIdQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.FindProductByIdQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindProductByIdQuery {
    return new FindProductByIdQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindProductByIdQuery {
    return new FindProductByIdQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindProductByIdQuery {
    return new FindProductByIdQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FindProductByIdQuery | PlainMessage<FindProductByIdQuery> | undefined, b: FindProductByIdQuery | PlainMessage<FindProductByIdQuery> | undefined): boolean {
    return proto3.util.equals(FindProductByIdQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.FindProductBySlugQuery
 */
export class FindProductBySlugQuery extends Message<FindProductBySlugQuery> {
  /**
   * @generated from field: string slug = 1;
   */
  slug = "";

  constructor(data?: PartialMessage<FindProductBySlugQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.FindProductBySlugQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindProductBySlugQuery {
    return new FindProductBySlugQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindProductBySlugQuery {
    return new FindProductBySlugQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindProductBySlugQuery {
    return new FindProductBySlugQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FindProductBySlugQuery | PlainMessage<FindProductBySlugQuery> | undefined, b: FindProductBySlugQuery | PlainMessage<FindProductBySlugQuery> | undefined): boolean {
    return proto3.util.equals(FindProductBySlugQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetProductsByIdsQuery
 */
export class GetProductsByIdsQuery extends Message<GetProductsByIdsQuery> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  /**
   * @generated from field: google.protobuf.BoolValue getCategory = 2;
   */
  getCategory?: boolean;

  constructor(data?: PartialMessage<GetProductsByIdsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetProductsByIdsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "getCategory", kind: "message", T: BoolValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsByIdsQuery {
    return new GetProductsByIdsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsByIdsQuery {
    return new GetProductsByIdsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsByIdsQuery {
    return new GetProductsByIdsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsByIdsQuery | PlainMessage<GetProductsByIdsQuery> | undefined, b: GetProductsByIdsQuery | PlainMessage<GetProductsByIdsQuery> | undefined): boolean {
    return proto3.util.equals(GetProductsByIdsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetSingleProductQuery
 */
export class GetSingleProductQuery extends Message<GetSingleProductQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  constructor(data?: PartialMessage<GetSingleProductQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetSingleProductQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSingleProductQuery {
    return new GetSingleProductQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSingleProductQuery {
    return new GetSingleProductQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSingleProductQuery {
    return new GetSingleProductQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetSingleProductQuery | PlainMessage<GetSingleProductQuery> | undefined, b: GetSingleProductQuery | PlainMessage<GetSingleProductQuery> | undefined): boolean {
    return proto3.util.equals(GetSingleProductQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetProductBundleItemsQuery
 */
export class GetProductBundleItemsQuery extends Message<GetProductBundleItemsQuery> {
  /**
   * @generated from field: string bundleId = 1;
   */
  bundleId = "";

  constructor(data?: PartialMessage<GetProductBundleItemsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetProductBundleItemsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bundleId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductBundleItemsQuery {
    return new GetProductBundleItemsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductBundleItemsQuery {
    return new GetProductBundleItemsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductBundleItemsQuery {
    return new GetProductBundleItemsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductBundleItemsQuery | PlainMessage<GetProductBundleItemsQuery> | undefined, b: GetProductBundleItemsQuery | PlainMessage<GetProductBundleItemsQuery> | undefined): boolean {
    return proto3.util.equals(GetProductBundleItemsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetProductsQuery
 */
export class GetProductsQuery extends Message<GetProductsQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  /**
   * @generated from field: repeated vklink.data.params.SortingParams sortBy = 2;
   */
  sortBy: SortingParams[] = [];

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 3;
   */
  paging?: PagingParams;

  /**
   * @generated from field: repeated string categoryIds = 4;
   */
  categoryIds: string[] = [];

  constructor(data?: PartialMessage<GetProductsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetProductsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
    { no: 2, name: "sortBy", kind: "message", T: SortingParams, repeated: true },
    { no: 3, name: "paging", kind: "message", T: PagingParams },
    { no: 4, name: "categoryIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsQuery {
    return new GetProductsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsQuery {
    return new GetProductsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsQuery {
    return new GetProductsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsQuery | PlainMessage<GetProductsQuery> | undefined, b: GetProductsQuery | PlainMessage<GetProductsQuery> | undefined): boolean {
    return proto3.util.equals(GetProductsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetAdminProductsQuery
 */
export class GetAdminProductsQuery extends Message<GetAdminProductsQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  /**
   * @generated from field: repeated vklink.data.params.SortingParams sortBy = 2;
   */
  sortBy: SortingParams[] = [];

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 3;
   */
  paging?: PagingParams;

  /**
   * @generated from field: repeated string categoryIds = 4;
   */
  categoryIds: string[] = [];

  constructor(data?: PartialMessage<GetAdminProductsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetAdminProductsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
    { no: 2, name: "sortBy", kind: "message", T: SortingParams, repeated: true },
    { no: 3, name: "paging", kind: "message", T: PagingParams },
    { no: 4, name: "categoryIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminProductsQuery {
    return new GetAdminProductsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminProductsQuery {
    return new GetAdminProductsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminProductsQuery {
    return new GetAdminProductsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminProductsQuery | PlainMessage<GetAdminProductsQuery> | undefined, b: GetAdminProductsQuery | PlainMessage<GetAdminProductsQuery> | undefined): boolean {
    return proto3.util.equals(GetAdminProductsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.FindAdminProductByIdQuery
 */
export class FindAdminProductByIdQuery extends Message<FindAdminProductByIdQuery> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<FindAdminProductByIdQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.FindAdminProductByIdQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindAdminProductByIdQuery {
    return new FindAdminProductByIdQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAdminProductByIdQuery {
    return new FindAdminProductByIdQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindAdminProductByIdQuery {
    return new FindAdminProductByIdQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FindAdminProductByIdQuery | PlainMessage<FindAdminProductByIdQuery> | undefined, b: FindAdminProductByIdQuery | PlainMessage<FindAdminProductByIdQuery> | undefined): boolean {
    return proto3.util.equals(FindAdminProductByIdQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetSingleAdminProductQuery
 */
export class GetSingleAdminProductQuery extends Message<GetSingleAdminProductQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  constructor(data?: PartialMessage<GetSingleAdminProductQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetSingleAdminProductQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSingleAdminProductQuery {
    return new GetSingleAdminProductQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSingleAdminProductQuery {
    return new GetSingleAdminProductQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSingleAdminProductQuery {
    return new GetSingleAdminProductQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetSingleAdminProductQuery | PlainMessage<GetSingleAdminProductQuery> | undefined, b: GetSingleAdminProductQuery | PlainMessage<GetSingleAdminProductQuery> | undefined): boolean {
    return proto3.util.equals(GetSingleAdminProductQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetAdminProductBundleItemsQuery
 */
export class GetAdminProductBundleItemsQuery extends Message<GetAdminProductBundleItemsQuery> {
  /**
   * @generated from field: string bundleId = 1;
   */
  bundleId = "";

  constructor(data?: PartialMessage<GetAdminProductBundleItemsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetAdminProductBundleItemsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bundleId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminProductBundleItemsQuery {
    return new GetAdminProductBundleItemsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminProductBundleItemsQuery {
    return new GetAdminProductBundleItemsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminProductBundleItemsQuery {
    return new GetAdminProductBundleItemsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminProductBundleItemsQuery | PlainMessage<GetAdminProductBundleItemsQuery> | undefined, b: GetAdminProductBundleItemsQuery | PlainMessage<GetAdminProductBundleItemsQuery> | undefined): boolean {
    return proto3.util.equals(GetAdminProductBundleItemsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetVariantsByIdsQuery
 */
export class GetVariantsByIdsQuery extends Message<GetVariantsByIdsQuery> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<GetVariantsByIdsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetVariantsByIdsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVariantsByIdsQuery {
    return new GetVariantsByIdsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVariantsByIdsQuery {
    return new GetVariantsByIdsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVariantsByIdsQuery {
    return new GetVariantsByIdsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetVariantsByIdsQuery | PlainMessage<GetVariantsByIdsQuery> | undefined, b: GetVariantsByIdsQuery | PlainMessage<GetVariantsByIdsQuery> | undefined): boolean {
    return proto3.util.equals(GetVariantsByIdsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetCategoriesByProductIdsQuery
 */
export class GetCategoriesByProductIdsQuery extends Message<GetCategoriesByProductIdsQuery> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<GetCategoriesByProductIdsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetCategoriesByProductIdsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCategoriesByProductIdsQuery {
    return new GetCategoriesByProductIdsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCategoriesByProductIdsQuery {
    return new GetCategoriesByProductIdsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCategoriesByProductIdsQuery {
    return new GetCategoriesByProductIdsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetCategoriesByProductIdsQuery | PlainMessage<GetCategoriesByProductIdsQuery> | undefined, b: GetCategoriesByProductIdsQuery | PlainMessage<GetCategoriesByProductIdsQuery> | undefined): boolean {
    return proto3.util.equals(GetCategoriesByProductIdsQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetProductReportQuery
 */
export class GetProductReportQuery extends Message<GetProductReportQuery> {
  /**
   * @generated from field: google.protobuf.StringValue startDate = 1;
   */
  startDate?: string;

  /**
   * @generated from field: google.protobuf.StringValue endDate = 2;
   */
  endDate?: string;

  /**
   * @generated from field: google.protobuf.StringValue storeId = 3;
   */
  storeId?: string;

  /**
   * @generated from field: google.protobuf.StringValue keyword = 4;
   */
  keyword?: string;

  /**
   * @generated from field: google.protobuf.StringValue categoryId = 5;
   */
  categoryId?: string;

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 6;
   */
  paging?: PagingParams;

  constructor(data?: PartialMessage<GetProductReportQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetProductReportQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startDate", kind: "message", T: StringValue },
    { no: 2, name: "endDate", kind: "message", T: StringValue },
    { no: 3, name: "storeId", kind: "message", T: StringValue },
    { no: 4, name: "keyword", kind: "message", T: StringValue },
    { no: 5, name: "categoryId", kind: "message", T: StringValue },
    { no: 6, name: "paging", kind: "message", T: PagingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductReportQuery {
    return new GetProductReportQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductReportQuery {
    return new GetProductReportQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductReportQuery {
    return new GetProductReportQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductReportQuery | PlainMessage<GetProductReportQuery> | undefined, b: GetProductReportQuery | PlainMessage<GetProductReportQuery> | undefined): boolean {
    return proto3.util.equals(GetProductReportQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.ExportProductReportQuery
 */
export class ExportProductReportQuery extends Message<ExportProductReportQuery> {
  /**
   * @generated from field: google.protobuf.StringValue startDate = 1;
   */
  startDate?: string;

  /**
   * @generated from field: google.protobuf.StringValue endDate = 2;
   */
  endDate?: string;

  /**
   * @generated from field: google.protobuf.StringValue storeId = 3;
   */
  storeId?: string;

  /**
   * @generated from field: google.protobuf.StringValue keyword = 4;
   */
  keyword?: string;

  /**
   * @generated from field: google.protobuf.StringValue categoryId = 5;
   */
  categoryId?: string;

  constructor(data?: PartialMessage<ExportProductReportQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.ExportProductReportQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startDate", kind: "message", T: StringValue },
    { no: 2, name: "endDate", kind: "message", T: StringValue },
    { no: 3, name: "storeId", kind: "message", T: StringValue },
    { no: 4, name: "keyword", kind: "message", T: StringValue },
    { no: 5, name: "categoryId", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportProductReportQuery {
    return new ExportProductReportQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportProductReportQuery {
    return new ExportProductReportQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportProductReportQuery {
    return new ExportProductReportQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ExportProductReportQuery | PlainMessage<ExportProductReportQuery> | undefined, b: ExportProductReportQuery | PlainMessage<ExportProductReportQuery> | undefined): boolean {
    return proto3.util.equals(ExportProductReportQuery, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.queries.GetProductReviewQuery
 */
export class GetProductReviewQuery extends Message<GetProductReviewQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  /**
   * @generated from field: repeated vklink.data.params.SortingParams sortBy = 2;
   */
  sortBy: SortingParams[] = [];

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 3;
   */
  paging?: PagingParams;

  constructor(data?: PartialMessage<GetProductReviewQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.queries.GetProductReviewQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
    { no: 2, name: "sortBy", kind: "message", T: SortingParams, repeated: true },
    { no: 3, name: "paging", kind: "message", T: PagingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductReviewQuery {
    return new GetProductReviewQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductReviewQuery {
    return new GetProductReviewQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductReviewQuery {
    return new GetProductReviewQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductReviewQuery | PlainMessage<GetProductReviewQuery> | undefined, b: GetProductReviewQuery | PlainMessage<GetProductReviewQuery> | undefined): boolean {
    return proto3.util.equals(GetProductReviewQuery, a, b);
  }
}

