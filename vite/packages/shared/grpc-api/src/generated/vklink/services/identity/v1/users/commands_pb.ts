// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/identity/v1/users/commands.proto (package vklink.identity.api.v1.users.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { Gender } from "../../../../libs/common/enums/gender_pb";
import { DateOnly } from "../../../../libs/protobuf/date_only_pb";

/**
 * @generated from message vklink.identity.api.v1.users.commands.CreateUserCommand
 */
export class CreateUserCommand extends Message<CreateUserCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string userName = 1;
   */
  userName = "";

  /**
   * @generated from field: google.protobuf.StringValue email = 2;
   */
  email?: string;

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 3;
   */
  phoneNumber?: string;

  /**
   * @generated from field: string firstName = 4;
   */
  firstName = "";

  /**
   * @generated from field: google.protobuf.StringValue lastName = 5;
   */
  lastName?: string;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 6;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 7;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: google.protobuf.StringValue avatar = 8;
   */
  avatar?: string;

  /**
   * @generated from field: repeated string roleIds = 9;
   */
  roleIds: string[] = [];

  /**
   * @generated from field: map<string, string> claims = 10;
   */
  claims: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateUserCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.users.commands.CreateUserCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "message", T: StringValue },
    { no: 3, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 4, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lastName", kind: "message", T: StringValue },
    { no: 6, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 7, name: "birthDate", kind: "message", T: DateOnly },
    { no: 8, name: "avatar", kind: "message", T: StringValue },
    { no: 9, name: "roleIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "claims", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserCommand {
    return new CreateUserCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserCommand {
    return new CreateUserCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserCommand {
    return new CreateUserCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserCommand | PlainMessage<CreateUserCommand> | undefined, b: CreateUserCommand | PlainMessage<CreateUserCommand> | undefined): boolean {
    return proto3.util.equals(CreateUserCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.users.commands.UpdateUserCommand
 */
export class UpdateUserCommand extends Message<UpdateUserCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string firstName = 2;
   */
  firstName = "";

  /**
   * @generated from field: google.protobuf.StringValue lastName = 3;
   */
  lastName?: string;

  /**
   * @generated from field: google.protobuf.StringValue fullName = 4;
   */
  fullName?: string;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 5;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 6;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: google.protobuf.StringValue avatar = 7;
   */
  avatar?: string;

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 8;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 9;
   */
  email?: string;

  constructor(data?: PartialMessage<UpdateUserCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.users.commands.UpdateUserCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lastName", kind: "message", T: StringValue },
    { no: 4, name: "fullName", kind: "message", T: StringValue },
    { no: 5, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 6, name: "birthDate", kind: "message", T: DateOnly },
    { no: 7, name: "avatar", kind: "message", T: StringValue },
    { no: 8, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 9, name: "email", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserCommand {
    return new UpdateUserCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserCommand {
    return new UpdateUserCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserCommand {
    return new UpdateUserCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserCommand | PlainMessage<UpdateUserCommand> | undefined, b: UpdateUserCommand | PlainMessage<UpdateUserCommand> | undefined): boolean {
    return proto3.util.equals(UpdateUserCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.users.commands.DeleteUserCommand
 */
export class DeleteUserCommand extends Message<DeleteUserCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteUserCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.users.commands.DeleteUserCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserCommand {
    return new DeleteUserCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserCommand {
    return new DeleteUserCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserCommand {
    return new DeleteUserCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserCommand | PlainMessage<DeleteUserCommand> | undefined, b: DeleteUserCommand | PlainMessage<DeleteUserCommand> | undefined): boolean {
    return proto3.util.equals(DeleteUserCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.users.commands.AssignOrRevokeRolesCommand
 */
export class AssignOrRevokeRolesCommand extends Message<AssignOrRevokeRolesCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated string roles = 2;
   */
  roles: string[] = [];

  constructor(data?: PartialMessage<AssignOrRevokeRolesCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.users.commands.AssignOrRevokeRolesCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignOrRevokeRolesCommand {
    return new AssignOrRevokeRolesCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignOrRevokeRolesCommand {
    return new AssignOrRevokeRolesCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignOrRevokeRolesCommand {
    return new AssignOrRevokeRolesCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AssignOrRevokeRolesCommand | PlainMessage<AssignOrRevokeRolesCommand> | undefined, b: AssignOrRevokeRolesCommand | PlainMessage<AssignOrRevokeRolesCommand> | undefined): boolean {
    return proto3.util.equals(AssignOrRevokeRolesCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.users.commands.BlockAccountCommand
 */
export class BlockAccountCommand extends Message<BlockAccountCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue remarks = 2;
   */
  remarks?: string;

  constructor(data?: PartialMessage<BlockAccountCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.users.commands.BlockAccountCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "remarks", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockAccountCommand {
    return new BlockAccountCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockAccountCommand {
    return new BlockAccountCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockAccountCommand {
    return new BlockAccountCommand().fromJsonString(jsonString, options);
  }

  static equals(a: BlockAccountCommand | PlainMessage<BlockAccountCommand> | undefined, b: BlockAccountCommand | PlainMessage<BlockAccountCommand> | undefined): boolean {
    return proto3.util.equals(BlockAccountCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.users.commands.UnblockAccountCommand
 */
export class UnblockAccountCommand extends Message<UnblockAccountCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue remarks = 2;
   */
  remarks?: string;

  constructor(data?: PartialMessage<UnblockAccountCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.users.commands.UnblockAccountCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "remarks", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnblockAccountCommand {
    return new UnblockAccountCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnblockAccountCommand {
    return new UnblockAccountCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnblockAccountCommand {
    return new UnblockAccountCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UnblockAccountCommand | PlainMessage<UnblockAccountCommand> | undefined, b: UnblockAccountCommand | PlainMessage<UnblockAccountCommand> | undefined): boolean {
    return proto3.util.equals(UnblockAccountCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.users.commands.CreateCustomerUserCommand
 */
export class CreateCustomerUserCommand extends Message<CreateCustomerUserCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string userName = 1;
   */
  userName = "";

  /**
   * @generated from field: google.protobuf.StringValue email = 2;
   */
  email?: string;

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 3;
   */
  phoneNumber?: string;

  /**
   * @generated from field: string firstName = 4;
   */
  firstName = "";

  /**
   * @generated from field: google.protobuf.StringValue lastName = 5;
   */
  lastName?: string;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 6;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 7;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: google.protobuf.StringValue avatar = 8;
   */
  avatar?: string;

  /**
   * @generated from field: repeated string roleIds = 9;
   */
  roleIds: string[] = [];

  /**
   * @generated from field: map<string, string> claims = 10;
   */
  claims: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateCustomerUserCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.users.commands.CreateCustomerUserCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "message", T: StringValue },
    { no: 3, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 4, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lastName", kind: "message", T: StringValue },
    { no: 6, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 7, name: "birthDate", kind: "message", T: DateOnly },
    { no: 8, name: "avatar", kind: "message", T: StringValue },
    { no: 9, name: "roleIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "claims", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCustomerUserCommand {
    return new CreateCustomerUserCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCustomerUserCommand {
    return new CreateCustomerUserCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCustomerUserCommand {
    return new CreateCustomerUserCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCustomerUserCommand | PlainMessage<CreateCustomerUserCommand> | undefined, b: CreateCustomerUserCommand | PlainMessage<CreateCustomerUserCommand> | undefined): boolean {
    return proto3.util.equals(CreateCustomerUserCommand, a, b);
  }
}

