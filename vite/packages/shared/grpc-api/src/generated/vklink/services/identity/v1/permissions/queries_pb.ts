// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/identity/v1/permissions/queries.proto (package vklink.identity.api.v1.permissions.queries, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.identity.api.v1.permissions.queries.GetAllPermissionsQuery
 */
export class GetAllPermissionsQuery extends Message<GetAllPermissionsQuery> {
  constructor(data?: PartialMessage<GetAllPermissionsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissions.queries.GetAllPermissionsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllPermissionsQuery {
    return new GetAllPermissionsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllPermissionsQuery {
    return new GetAllPermissionsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllPermissionsQuery {
    return new GetAllPermissionsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllPermissionsQuery | PlainMessage<GetAllPermissionsQuery> | undefined, b: GetAllPermissionsQuery | PlainMessage<GetAllPermissionsQuery> | undefined): boolean {
    return proto3.util.equals(GetAllPermissionsQuery, a, b);
  }
}

