// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/store/v1/products/commands.proto (package vklink.store.api.v1.products.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { LanguageCode } from "../../../../libs/common/enums/language_code_pb";
import { ProductType } from "../../../../libs/common/enums/product_type_pb";
import { UnitType } from "../../../../libs/common/enums/unit_type_pb";
import { CreateDocumentInfoCommand } from "../../../../libs/common/commands/create_document_info_command_pb";

/**
 * @generated from message vklink.store.api.v1.products.commands.ProductTranslationCommand
 */
export class ProductTranslationCommand extends Message<ProductTranslationCommand> {
  /**
   * @generated from field: vklink.grpc.enums.LanguageCode langCode = 1;
   */
  langCode = LanguageCode.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue name = 2;
   */
  name?: string;

  /**
   * @generated from field: google.protobuf.StringValue shortDescription = 3;
   */
  shortDescription?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  constructor(data?: PartialMessage<ProductTranslationCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.ProductTranslationCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "langCode", kind: "enum", T: proto3.getEnumType(LanguageCode) },
    { no: 2, name: "name", kind: "message", T: StringValue },
    { no: 3, name: "shortDescription", kind: "message", T: StringValue },
    { no: 4, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductTranslationCommand {
    return new ProductTranslationCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductTranslationCommand {
    return new ProductTranslationCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductTranslationCommand {
    return new ProductTranslationCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ProductTranslationCommand | PlainMessage<ProductTranslationCommand> | undefined, b: ProductTranslationCommand | PlainMessage<ProductTranslationCommand> | undefined): boolean {
    return proto3.util.equals(ProductTranslationCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.BundleItem
 */
export class BundleItem extends Message<BundleItem> {
  /**
   * @generated from field: string productId = 1;
   */
  productId = "";

  /**
   * @generated from field: google.protobuf.StringValue variantId = 2;
   */
  variantId?: string;

  /**
   * @generated from field: int32 quantity = 3;
   */
  quantity = 0;

  constructor(data?: PartialMessage<BundleItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.BundleItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variantId", kind: "message", T: StringValue },
    { no: 3, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BundleItem {
    return new BundleItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BundleItem {
    return new BundleItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BundleItem {
    return new BundleItem().fromJsonString(jsonString, options);
  }

  static equals(a: BundleItem | PlainMessage<BundleItem> | undefined, b: BundleItem | PlainMessage<BundleItem> | undefined): boolean {
    return proto3.util.equals(BundleItem, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.CreateProductCommand
 */
export class CreateProductCommand extends Message<CreateProductCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: google.protobuf.StringValue shortDescription = 4;
   */
  shortDescription?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 5;
   */
  description?: string;

  /**
   * @generated from field: string unitPrice = 6;
   */
  unitPrice = "";

  /**
   * @generated from field: google.protobuf.StringValue discountPrice = 7;
   */
  discountPrice?: string;

  /**
   * @generated from field: google.protobuf.StringValue vatPercent = 8;
   */
  vatPercent?: string;

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 9;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 10;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: repeated vklink.common.commands.CreateDocumentInfoCommand documents = 11;
   */
  documents: CreateDocumentInfoCommand[] = [];

  /**
   * @generated from field: vklink.common.commands.CreateDocumentInfoCommand thumbnail = 12;
   */
  thumbnail?: CreateDocumentInfoCommand;

  /**
   * @generated from field: int32 order = 13;
   */
  order = 0;

  /**
   * relationship fields: from 51 to 60
   * string partnerId = 51;
   *
   * @generated from field: repeated vklink.store.api.v1.products.commands.ProductTranslationCommand translations = 51;
   */
  translations: ProductTranslationCommand[] = [];

  /**
   * @generated from field: repeated string categoryIds = 52;
   */
  categoryIds: string[] = [];

  /**
   * @generated from field: repeated vklink.store.api.v1.products.commands.BundleItem items = 53;
   */
  items: BundleItem[] = [];

  constructor(data?: PartialMessage<CreateProductCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.CreateProductCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shortDescription", kind: "message", T: StringValue },
    { no: 5, name: "description", kind: "message", T: StringValue },
    { no: 6, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "discountPrice", kind: "message", T: StringValue },
    { no: 8, name: "vatPercent", kind: "message", T: StringValue },
    { no: 9, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 10, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 11, name: "documents", kind: "message", T: CreateDocumentInfoCommand, repeated: true },
    { no: 12, name: "thumbnail", kind: "message", T: CreateDocumentInfoCommand },
    { no: 13, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 51, name: "translations", kind: "message", T: ProductTranslationCommand, repeated: true },
    { no: 52, name: "categoryIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 53, name: "items", kind: "message", T: BundleItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProductCommand {
    return new CreateProductCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProductCommand {
    return new CreateProductCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProductCommand {
    return new CreateProductCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProductCommand | PlainMessage<CreateProductCommand> | undefined, b: CreateProductCommand | PlainMessage<CreateProductCommand> | undefined): boolean {
    return proto3.util.equals(CreateProductCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.UpdateProductCommand
 */
export class UpdateProductCommand extends Message<UpdateProductCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: google.protobuf.StringValue shortDescription = 4;
   */
  shortDescription?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 5;
   */
  description?: string;

  /**
   * @generated from field: string unitPrice = 6;
   */
  unitPrice = "";

  /**
   * @generated from field: google.protobuf.StringValue discountPrice = 7;
   */
  discountPrice?: string;

  /**
   * @generated from field: google.protobuf.StringValue vatPercent = 8;
   */
  vatPercent?: string;

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 9;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 10;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: repeated vklink.common.commands.CreateDocumentInfoCommand documents = 11;
   */
  documents: CreateDocumentInfoCommand[] = [];

  /**
   * @generated from field: vklink.common.commands.CreateDocumentInfoCommand thumbnail = 12;
   */
  thumbnail?: CreateDocumentInfoCommand;

  /**
   * @generated from field: int32 order = 13;
   */
  order = 0;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated string categoryIds = 51;
   */
  categoryIds: string[] = [];

  /**
   * @generated from field: repeated vklink.store.api.v1.products.commands.BundleItem items = 52;
   */
  items: BundleItem[] = [];

  /**
   * @generated from field: repeated vklink.store.api.v1.products.commands.ProductTranslationCommand translations = 53;
   */
  translations: ProductTranslationCommand[] = [];

  constructor(data?: PartialMessage<UpdateProductCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.UpdateProductCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shortDescription", kind: "message", T: StringValue },
    { no: 5, name: "description", kind: "message", T: StringValue },
    { no: 6, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "discountPrice", kind: "message", T: StringValue },
    { no: 8, name: "vatPercent", kind: "message", T: StringValue },
    { no: 9, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 10, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 11, name: "documents", kind: "message", T: CreateDocumentInfoCommand, repeated: true },
    { no: 12, name: "thumbnail", kind: "message", T: CreateDocumentInfoCommand },
    { no: 13, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 51, name: "categoryIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 52, name: "items", kind: "message", T: BundleItem, repeated: true },
    { no: 53, name: "translations", kind: "message", T: ProductTranslationCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProductCommand {
    return new UpdateProductCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProductCommand {
    return new UpdateProductCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProductCommand {
    return new UpdateProductCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProductCommand | PlainMessage<UpdateProductCommand> | undefined, b: UpdateProductCommand | PlainMessage<UpdateProductCommand> | undefined): boolean {
    return proto3.util.equals(UpdateProductCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.CreateVariantCommand
 */
export class CreateVariantCommand extends Message<CreateVariantCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  constructor(data?: PartialMessage<CreateVariantCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.CreateVariantCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVariantCommand {
    return new CreateVariantCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVariantCommand {
    return new CreateVariantCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVariantCommand {
    return new CreateVariantCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVariantCommand | PlainMessage<CreateVariantCommand> | undefined, b: CreateVariantCommand | PlainMessage<CreateVariantCommand> | undefined): boolean {
    return proto3.util.equals(CreateVariantCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.UpdateVariantCommand
 */
export class UpdateVariantCommand extends Message<UpdateVariantCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  constructor(data?: PartialMessage<UpdateVariantCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.UpdateVariantCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateVariantCommand {
    return new UpdateVariantCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateVariantCommand {
    return new UpdateVariantCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateVariantCommand {
    return new UpdateVariantCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateVariantCommand | PlainMessage<UpdateVariantCommand> | undefined, b: UpdateVariantCommand | PlainMessage<UpdateVariantCommand> | undefined): boolean {
    return proto3.util.equals(UpdateVariantCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.CreateProductVariantCommand
 */
export class CreateProductVariantCommand extends Message<CreateProductVariantCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string productId = 2;
   */
  productId = "";

  /**
   * @generated from field: string variantId = 3;
   */
  variantId = "";

  /**
   * @generated from field: string unitPrice = 4;
   */
  unitPrice = "";

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 5;
   */
  unit = UnitType.UNSPECIFIED;

  constructor(data?: PartialMessage<CreateProductVariantCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.CreateProductVariantCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "variantId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProductVariantCommand {
    return new CreateProductVariantCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProductVariantCommand {
    return new CreateProductVariantCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProductVariantCommand {
    return new CreateProductVariantCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProductVariantCommand | PlainMessage<CreateProductVariantCommand> | undefined, b: CreateProductVariantCommand | PlainMessage<CreateProductVariantCommand> | undefined): boolean {
    return proto3.util.equals(CreateProductVariantCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.UpdateProductVariantCommand
 */
export class UpdateProductVariantCommand extends Message<UpdateProductVariantCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string unitPrice = 2;
   */
  unitPrice = "";

  constructor(data?: PartialMessage<UpdateProductVariantCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.UpdateProductVariantCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProductVariantCommand {
    return new UpdateProductVariantCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProductVariantCommand {
    return new UpdateProductVariantCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProductVariantCommand {
    return new UpdateProductVariantCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProductVariantCommand | PlainMessage<UpdateProductVariantCommand> | undefined, b: UpdateProductVariantCommand | PlainMessage<UpdateProductVariantCommand> | undefined): boolean {
    return proto3.util.equals(UpdateProductVariantCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.EnableProductVariantCommand
 */
export class EnableProductVariantCommand extends Message<EnableProductVariantCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<EnableProductVariantCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.EnableProductVariantCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableProductVariantCommand {
    return new EnableProductVariantCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableProductVariantCommand {
    return new EnableProductVariantCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableProductVariantCommand {
    return new EnableProductVariantCommand().fromJsonString(jsonString, options);
  }

  static equals(a: EnableProductVariantCommand | PlainMessage<EnableProductVariantCommand> | undefined, b: EnableProductVariantCommand | PlainMessage<EnableProductVariantCommand> | undefined): boolean {
    return proto3.util.equals(EnableProductVariantCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.DisableProductVariantCommand
 */
export class DisableProductVariantCommand extends Message<DisableProductVariantCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DisableProductVariantCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.DisableProductVariantCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableProductVariantCommand {
    return new DisableProductVariantCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableProductVariantCommand {
    return new DisableProductVariantCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableProductVariantCommand {
    return new DisableProductVariantCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DisableProductVariantCommand | PlainMessage<DisableProductVariantCommand> | undefined, b: DisableProductVariantCommand | PlainMessage<DisableProductVariantCommand> | undefined): boolean {
    return proto3.util.equals(DisableProductVariantCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.EnableProductCommand
 */
export class EnableProductCommand extends Message<EnableProductCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<EnableProductCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.EnableProductCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableProductCommand {
    return new EnableProductCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableProductCommand {
    return new EnableProductCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableProductCommand {
    return new EnableProductCommand().fromJsonString(jsonString, options);
  }

  static equals(a: EnableProductCommand | PlainMessage<EnableProductCommand> | undefined, b: EnableProductCommand | PlainMessage<EnableProductCommand> | undefined): boolean {
    return proto3.util.equals(EnableProductCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.DisableProductCommand
 */
export class DisableProductCommand extends Message<DisableProductCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DisableProductCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.DisableProductCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableProductCommand {
    return new DisableProductCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableProductCommand {
    return new DisableProductCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableProductCommand {
    return new DisableProductCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DisableProductCommand | PlainMessage<DisableProductCommand> | undefined, b: DisableProductCommand | PlainMessage<DisableProductCommand> | undefined): boolean {
    return proto3.util.equals(DisableProductCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.DeleteProductCommand
 */
export class DeleteProductCommand extends Message<DeleteProductCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteProductCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.DeleteProductCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProductCommand {
    return new DeleteProductCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProductCommand {
    return new DeleteProductCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProductCommand {
    return new DeleteProductCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProductCommand | PlainMessage<DeleteProductCommand> | undefined, b: DeleteProductCommand | PlainMessage<DeleteProductCommand> | undefined): boolean {
    return proto3.util.equals(DeleteProductCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.AddOrderProductReviewCommand
 */
export class AddOrderProductReviewCommand extends Message<AddOrderProductReviewCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string orderId = 1;
   */
  orderId = "";

  /**
   * @generated from field: string orderNumber = 2;
   */
  orderNumber = "";

  /**
   * @generated from field: repeated vklink.store.api.v1.products.commands.AddProductReviewCommand productReviews = 51;
   */
  productReviews: AddProductReviewCommand[] = [];

  constructor(data?: PartialMessage<AddOrderProductReviewCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.AddOrderProductReviewCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orderId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orderNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 51, name: "productReviews", kind: "message", T: AddProductReviewCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrderProductReviewCommand {
    return new AddOrderProductReviewCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrderProductReviewCommand {
    return new AddOrderProductReviewCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrderProductReviewCommand {
    return new AddOrderProductReviewCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrderProductReviewCommand | PlainMessage<AddOrderProductReviewCommand> | undefined, b: AddOrderProductReviewCommand | PlainMessage<AddOrderProductReviewCommand> | undefined): boolean {
    return proto3.util.equals(AddOrderProductReviewCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.commands.AddProductReviewCommand
 */
export class AddProductReviewCommand extends Message<AddProductReviewCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string productId = 1;
   */
  productId = "";

  /**
   * @generated from field: int32 rate = 2;
   */
  rate = 0;

  /**
   * @generated from field: string comment = 3;
   */
  comment = "";

  /**
   * @generated from field: repeated vklink.common.commands.CreateDocumentInfoCommand documents = 51;
   */
  documents: CreateDocumentInfoCommand[] = [];

  constructor(data?: PartialMessage<AddProductReviewCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.commands.AddProductReviewCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 51, name: "documents", kind: "message", T: CreateDocumentInfoCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProductReviewCommand {
    return new AddProductReviewCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProductReviewCommand {
    return new AddProductReviewCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProductReviewCommand {
    return new AddProductReviewCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AddProductReviewCommand | PlainMessage<AddProductReviewCommand> | undefined, b: AddProductReviewCommand | PlainMessage<AddProductReviewCommand> | undefined): boolean {
    return proto3.util.equals(AddProductReviewCommand, a, b);
  }
}

