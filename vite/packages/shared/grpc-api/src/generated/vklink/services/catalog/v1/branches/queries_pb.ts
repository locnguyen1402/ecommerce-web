// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/catalog/v1/branches/queries.proto (package vklink.catalog.api.v1.branches.queries, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { FilteringParams } from "../../../../libs/data/params/filtering_params_pb";
import { SortingParams } from "../../../../libs/data/params/sorting_params_pb";
import { PagingParams } from "../../../../libs/data/params/paging_params_pb";

/**
 * @generated from message vklink.catalog.api.v1.branches.queries.FindBranchByIdQuery
 */
export class FindBranchByIdQuery extends Message<FindBranchByIdQuery> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<FindBranchByIdQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.branches.queries.FindBranchByIdQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindBranchByIdQuery {
    return new FindBranchByIdQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindBranchByIdQuery {
    return new FindBranchByIdQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindBranchByIdQuery {
    return new FindBranchByIdQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FindBranchByIdQuery | PlainMessage<FindBranchByIdQuery> | undefined, b: FindBranchByIdQuery | PlainMessage<FindBranchByIdQuery> | undefined): boolean {
    return proto3.util.equals(FindBranchByIdQuery, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.branches.queries.FindBranchByCodeQuery
 */
export class FindBranchByCodeQuery extends Message<FindBranchByCodeQuery> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<FindBranchByCodeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.branches.queries.FindBranchByCodeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindBranchByCodeQuery {
    return new FindBranchByCodeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindBranchByCodeQuery {
    return new FindBranchByCodeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindBranchByCodeQuery {
    return new FindBranchByCodeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FindBranchByCodeQuery | PlainMessage<FindBranchByCodeQuery> | undefined, b: FindBranchByCodeQuery | PlainMessage<FindBranchByCodeQuery> | undefined): boolean {
    return proto3.util.equals(FindBranchByCodeQuery, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.branches.queries.GetBranchesQuery
 */
export class GetBranchesQuery extends Message<GetBranchesQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  /**
   * @generated from field: repeated vklink.data.params.SortingParams sortBy = 2;
   */
  sortBy: SortingParams[] = [];

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 3;
   */
  paging?: PagingParams;

  constructor(data?: PartialMessage<GetBranchesQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.branches.queries.GetBranchesQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
    { no: 2, name: "sortBy", kind: "message", T: SortingParams, repeated: true },
    { no: 3, name: "paging", kind: "message", T: PagingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBranchesQuery {
    return new GetBranchesQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBranchesQuery {
    return new GetBranchesQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBranchesQuery {
    return new GetBranchesQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetBranchesQuery | PlainMessage<GetBranchesQuery> | undefined, b: GetBranchesQuery | PlainMessage<GetBranchesQuery> | undefined): boolean {
    return proto3.util.equals(GetBranchesQuery, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.branches.queries.GetBranchesByBankIdQuery
 */
export class GetBranchesByBankIdQuery extends Message<GetBranchesByBankIdQuery> {
  /**
   * @generated from field: string bankId = 1;
   */
  bankId = "";

  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 2;
   */
  filter?: FilteringParams;

  /**
   * @generated from field: repeated vklink.data.params.SortingParams sortBy = 3;
   */
  sortBy: SortingParams[] = [];

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 4;
   */
  paging?: PagingParams;

  constructor(data?: PartialMessage<GetBranchesByBankIdQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.branches.queries.GetBranchesByBankIdQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bankId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: FilteringParams },
    { no: 3, name: "sortBy", kind: "message", T: SortingParams, repeated: true },
    { no: 4, name: "paging", kind: "message", T: PagingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBranchesByBankIdQuery {
    return new GetBranchesByBankIdQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBranchesByBankIdQuery {
    return new GetBranchesByBankIdQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBranchesByBankIdQuery {
    return new GetBranchesByBankIdQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetBranchesByBankIdQuery | PlainMessage<GetBranchesByBankIdQuery> | undefined, b: GetBranchesByBankIdQuery | PlainMessage<GetBranchesByBankIdQuery> | undefined): boolean {
    return proto3.util.equals(GetBranchesByBankIdQuery, a, b);
  }
}

