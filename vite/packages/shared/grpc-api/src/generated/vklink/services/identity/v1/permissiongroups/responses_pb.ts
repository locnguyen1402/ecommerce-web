// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/identity/v1/permissiongroups/responses.proto (package vklink.identity.api.v1.permissiongroups.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.identity.api.v1.permissiongroups.responses.PermissionInfoResponse
 */
export class PermissionInfoResponse extends Message<PermissionInfoResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<PermissionInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissiongroups.responses.PermissionInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionInfoResponse {
    return new PermissionInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionInfoResponse {
    return new PermissionInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionInfoResponse {
    return new PermissionInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionInfoResponse | PlainMessage<PermissionInfoResponse> | undefined, b: PermissionInfoResponse | PlainMessage<PermissionInfoResponse> | undefined): boolean {
    return proto3.util.equals(PermissionInfoResponse, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.permissiongroups.responses.PermissionGroupResponse
 */
export class PermissionGroupResponse extends Message<PermissionGroupResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  /**
   * @generated from field: repeated vklink.identity.api.v1.permissiongroups.responses.PermissionInfoResponse permissions = 4;
   */
  permissions: PermissionInfoResponse[] = [];

  constructor(data?: PartialMessage<PermissionGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissiongroups.responses.PermissionGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
    { no: 4, name: "permissions", kind: "message", T: PermissionInfoResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionGroupResponse {
    return new PermissionGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionGroupResponse {
    return new PermissionGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionGroupResponse {
    return new PermissionGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionGroupResponse | PlainMessage<PermissionGroupResponse> | undefined, b: PermissionGroupResponse | PlainMessage<PermissionGroupResponse> | undefined): boolean {
    return proto3.util.equals(PermissionGroupResponse, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.permissiongroups.responses.SinglePermissionGroupResponse
 */
export class SinglePermissionGroupResponse extends Message<SinglePermissionGroupResponse> {
  /**
   * @generated from field: vklink.identity.api.v1.permissiongroups.responses.PermissionGroupResponse value = 1;
   */
  value?: PermissionGroupResponse;

  constructor(data?: PartialMessage<SinglePermissionGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissiongroups.responses.SinglePermissionGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: PermissionGroupResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinglePermissionGroupResponse {
    return new SinglePermissionGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinglePermissionGroupResponse {
    return new SinglePermissionGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinglePermissionGroupResponse {
    return new SinglePermissionGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SinglePermissionGroupResponse | PlainMessage<SinglePermissionGroupResponse> | undefined, b: SinglePermissionGroupResponse | PlainMessage<SinglePermissionGroupResponse> | undefined): boolean {
    return proto3.util.equals(SinglePermissionGroupResponse, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.permissiongroups.responses.ListPermissionGroupsResponse
 */
export class ListPermissionGroupsResponse extends Message<ListPermissionGroupsResponse> {
  /**
   * @generated from field: repeated vklink.identity.api.v1.permissiongroups.responses.PermissionGroupResponse value = 1;
   */
  value: PermissionGroupResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListPermissionGroupsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissiongroups.responses.ListPermissionGroupsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: PermissionGroupResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPermissionGroupsResponse {
    return new ListPermissionGroupsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPermissionGroupsResponse {
    return new ListPermissionGroupsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPermissionGroupsResponse {
    return new ListPermissionGroupsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPermissionGroupsResponse | PlainMessage<ListPermissionGroupsResponse> | undefined, b: ListPermissionGroupsResponse | PlainMessage<ListPermissionGroupsResponse> | undefined): boolean {
    return proto3.util.equals(ListPermissionGroupsResponse, a, b);
  }
}

