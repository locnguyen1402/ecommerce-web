// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/store/v1/products/responses.proto (package vklink.store.api.v1.products.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue, Timestamp } from "@bufbuild/protobuf";
import { ProductType } from "../../../../libs/common/enums/product_type_pb";
import { UnitType } from "../../../../libs/common/enums/unit_type_pb";
import { DocumentInfoResponse } from "../../../../libs/common/responses/document_info_response_pb";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";
import { ActorInfoResponse } from "../../../../libs/common/responses/actor_info_response_pb";
import { LanguageCode } from "../../../../libs/common/enums/language_code_pb";
import { CategoryResponse } from "../categories/responses_pb";

/**
 * @generated from message vklink.store.api.v1.products.responses.VariantResponse
 */
export class VariantResponse extends Message<VariantResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  constructor(data?: PartialMessage<VariantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.VariantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VariantResponse {
    return new VariantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VariantResponse {
    return new VariantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VariantResponse {
    return new VariantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VariantResponse | PlainMessage<VariantResponse> | undefined, b: VariantResponse | PlainMessage<VariantResponse> | undefined): boolean {
    return proto3.util.equals(VariantResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ProductBundleItemResponse
 */
export class ProductBundleItemResponse extends Message<ProductBundleItemResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string productId = 2;
   */
  productId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 4;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 5;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: string unitPrice = 6;
   */
  unitPrice = "";

  /**
   * @generated from field: google.protobuf.StringValue discountPrice = 7;
   */
  discountPrice?: string;

  /**
   * @generated from field: int32 quantity = 8;
   */
  quantity = 0;

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse document = 9;
   */
  document?: DocumentInfoResponse;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: vklink.store.api.v1.products.responses.VariantResponse variant = 51;
   */
  variant?: VariantResponse;

  constructor(data?: PartialMessage<ProductBundleItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ProductBundleItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 5, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 6, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "discountPrice", kind: "message", T: StringValue },
    { no: 8, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "document", kind: "message", T: DocumentInfoResponse },
    { no: 51, name: "variant", kind: "message", T: VariantResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductBundleItemResponse {
    return new ProductBundleItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductBundleItemResponse {
    return new ProductBundleItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductBundleItemResponse {
    return new ProductBundleItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductBundleItemResponse | PlainMessage<ProductBundleItemResponse> | undefined, b: ProductBundleItemResponse | PlainMessage<ProductBundleItemResponse> | undefined): boolean {
    return proto3.util.equals(ProductBundleItemResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ProductVariantResponse
 */
export class ProductVariantResponse extends Message<ProductVariantResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string productId = 2;
   */
  productId = "";

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 3;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: string unitPrice = 4;
   */
  unitPrice = "";

  /**
   * @generated from field: bool isEnabled = 5;
   */
  isEnabled = false;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: vklink.store.api.v1.products.responses.VariantResponse variant = 51;
   */
  variant?: VariantResponse;

  constructor(data?: PartialMessage<ProductVariantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ProductVariantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 4, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "isEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 51, name: "variant", kind: "message", T: VariantResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductVariantResponse {
    return new ProductVariantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductVariantResponse {
    return new ProductVariantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductVariantResponse {
    return new ProductVariantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductVariantResponse | PlainMessage<ProductVariantResponse> | undefined, b: ProductVariantResponse | PlainMessage<ProductVariantResponse> | undefined): boolean {
    return proto3.util.equals(ProductVariantResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ProductResponse
 */
export class ProductResponse extends Message<ProductResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 4;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 5;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue shortDescription = 6;
   */
  shortDescription?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 7;
   */
  description?: string;

  /**
   * @generated from field: string unitPrice = 8;
   */
  unitPrice = "";

  /**
   * @generated from field: google.protobuf.StringValue discountPrice = 9;
   */
  discountPrice?: string;

  /**
   * @generated from field: google.protobuf.StringValue vatPercent = 10;
   */
  vatPercent?: string;

  /**
   * @generated from field: repeated vklink.common.responses.DocumentInfoResponse documents = 11;
   */
  documents: DocumentInfoResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse thumbnail = 12;
   */
  thumbnail?: DocumentInfoResponse;

  /**
   * @generated from field: int32 order = 13;
   */
  order = 0;

  /**
   * @generated from field: float rate = 14;
   */
  rate = 0;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductVariantResponse variants = 51;
   */
  variants: ProductVariantResponse[] = [];

  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductBundleItemResponse items = 52;
   */
  items: ProductBundleItemResponse[] = [];

  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.AdminProductCategoryResponse categories = 53;
   */
  categories: AdminProductCategoryResponse[] = [];

  constructor(data?: PartialMessage<ProductResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ProductResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 5, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 6, name: "shortDescription", kind: "message", T: StringValue },
    { no: 7, name: "description", kind: "message", T: StringValue },
    { no: 8, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "discountPrice", kind: "message", T: StringValue },
    { no: 10, name: "vatPercent", kind: "message", T: StringValue },
    { no: 11, name: "documents", kind: "message", T: DocumentInfoResponse, repeated: true },
    { no: 12, name: "thumbnail", kind: "message", T: DocumentInfoResponse },
    { no: 13, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "rate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 51, name: "variants", kind: "message", T: ProductVariantResponse, repeated: true },
    { no: 52, name: "items", kind: "message", T: ProductBundleItemResponse, repeated: true },
    { no: 53, name: "categories", kind: "message", T: AdminProductCategoryResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductResponse {
    return new ProductResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductResponse {
    return new ProductResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductResponse {
    return new ProductResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductResponse | PlainMessage<ProductResponse> | undefined, b: ProductResponse | PlainMessage<ProductResponse> | undefined): boolean {
    return proto3.util.equals(ProductResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.OrderedProductResponse
 */
export class OrderedProductResponse extends Message<OrderedProductResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 3;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 4;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: string unitPrice = 5;
   */
  unitPrice = "";

  /**
   * @generated from field: google.protobuf.StringValue discountPrice = 6;
   */
  discountPrice?: string;

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse document = 7;
   */
  document?: DocumentInfoResponse;

  /**
   * @generated from field: string vatPercent = 8;
   */
  vatPercent = "";

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductBundleItemResponse items = 51;
   */
  items: ProductBundleItemResponse[] = [];

  /**
   * @generated from field: vklink.store.api.v1.products.responses.VariantResponse variant = 52;
   */
  variant?: VariantResponse;

  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.OrderedProductCategoryResponse categories = 53;
   */
  categories: OrderedProductCategoryResponse[] = [];

  constructor(data?: PartialMessage<OrderedProductResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.OrderedProductResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 4, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 5, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "discountPrice", kind: "message", T: StringValue },
    { no: 7, name: "document", kind: "message", T: DocumentInfoResponse },
    { no: 8, name: "vatPercent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 51, name: "items", kind: "message", T: ProductBundleItemResponse, repeated: true },
    { no: 52, name: "variant", kind: "message", T: VariantResponse },
    { no: 53, name: "categories", kind: "message", T: OrderedProductCategoryResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderedProductResponse {
    return new OrderedProductResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderedProductResponse {
    return new OrderedProductResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderedProductResponse {
    return new OrderedProductResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OrderedProductResponse | PlainMessage<OrderedProductResponse> | undefined, b: OrderedProductResponse | PlainMessage<OrderedProductResponse> | undefined): boolean {
    return proto3.util.equals(OrderedProductResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.MultipleOrderedProductsResponse
 */
export class MultipleOrderedProductsResponse extends Message<MultipleOrderedProductsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.OrderedProductResponse value = 1;
   */
  value: OrderedProductResponse[] = [];

  constructor(data?: PartialMessage<MultipleOrderedProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.MultipleOrderedProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: OrderedProductResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipleOrderedProductsResponse {
    return new MultipleOrderedProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipleOrderedProductsResponse {
    return new MultipleOrderedProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipleOrderedProductsResponse {
    return new MultipleOrderedProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultipleOrderedProductsResponse | PlainMessage<MultipleOrderedProductsResponse> | undefined, b: MultipleOrderedProductsResponse | PlainMessage<MultipleOrderedProductsResponse> | undefined): boolean {
    return proto3.util.equals(MultipleOrderedProductsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.SingleProductResponse
 */
export class SingleProductResponse extends Message<SingleProductResponse> {
  /**
   * @generated from field: vklink.store.api.v1.products.responses.ProductResponse value = 1;
   */
  value?: ProductResponse;

  constructor(data?: PartialMessage<SingleProductResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.SingleProductResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ProductResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleProductResponse {
    return new SingleProductResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleProductResponse {
    return new SingleProductResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleProductResponse {
    return new SingleProductResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleProductResponse | PlainMessage<SingleProductResponse> | undefined, b: SingleProductResponse | PlainMessage<SingleProductResponse> | undefined): boolean {
    return proto3.util.equals(SingleProductResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ListBundleProductsResponse
 */
export class ListBundleProductsResponse extends Message<ListBundleProductsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductBundleItemResponse value = 1;
   */
  value: ProductBundleItemResponse[] = [];

  constructor(data?: PartialMessage<ListBundleProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ListBundleProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ProductBundleItemResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBundleProductsResponse {
    return new ListBundleProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBundleProductsResponse {
    return new ListBundleProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBundleProductsResponse {
    return new ListBundleProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBundleProductsResponse | PlainMessage<ListBundleProductsResponse> | undefined, b: ListBundleProductsResponse | PlainMessage<ListBundleProductsResponse> | undefined): boolean {
    return proto3.util.equals(ListBundleProductsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ListProductsResponse
 */
export class ListProductsResponse extends Message<ListProductsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductResponse value = 1;
   */
  value: ProductResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ListProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ProductResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProductsResponse {
    return new ListProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProductsResponse {
    return new ListProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProductsResponse {
    return new ListProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProductsResponse | PlainMessage<ListProductsResponse> | undefined, b: ListProductsResponse | PlainMessage<ListProductsResponse> | undefined): boolean {
    return proto3.util.equals(ListProductsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.MultipleProductsResponse
 */
export class MultipleProductsResponse extends Message<MultipleProductsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductResponse value = 1;
   */
  value: ProductResponse[] = [];

  constructor(data?: PartialMessage<MultipleProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.MultipleProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ProductResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipleProductsResponse {
    return new MultipleProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipleProductsResponse {
    return new MultipleProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipleProductsResponse {
    return new MultipleProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultipleProductsResponse | PlainMessage<MultipleProductsResponse> | undefined, b: MultipleProductsResponse | PlainMessage<MultipleProductsResponse> | undefined): boolean {
    return proto3.util.equals(MultipleProductsResponse, a, b);
  }
}

/**
 * For web admin
 *
 * @generated from message vklink.store.api.v1.products.responses.AdminProductCategoryResponse
 */
export class AdminProductCategoryResponse extends Message<AdminProductCategoryResponse> {
  /**
   * @generated from field: string categoryId = 1;
   */
  categoryId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  constructor(data?: PartialMessage<AdminProductCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.AdminProductCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categoryId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminProductCategoryResponse {
    return new AdminProductCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminProductCategoryResponse {
    return new AdminProductCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminProductCategoryResponse {
    return new AdminProductCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminProductCategoryResponse | PlainMessage<AdminProductCategoryResponse> | undefined, b: AdminProductCategoryResponse | PlainMessage<AdminProductCategoryResponse> | undefined): boolean {
    return proto3.util.equals(AdminProductCategoryResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.OrderedProductCategoryResponse
 */
export class OrderedProductCategoryResponse extends Message<OrderedProductCategoryResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse icon = 4;
   */
  icon?: DocumentInfoResponse;

  constructor(data?: PartialMessage<OrderedProductCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.OrderedProductCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "icon", kind: "message", T: DocumentInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderedProductCategoryResponse {
    return new OrderedProductCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderedProductCategoryResponse {
    return new OrderedProductCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderedProductCategoryResponse {
    return new OrderedProductCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OrderedProductCategoryResponse | PlainMessage<OrderedProductCategoryResponse> | undefined, b: OrderedProductCategoryResponse | PlainMessage<OrderedProductCategoryResponse> | undefined): boolean {
    return proto3.util.equals(OrderedProductCategoryResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.AdminProductBundleItemResponse
 */
export class AdminProductBundleItemResponse extends Message<AdminProductBundleItemResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string productId = 2;
   */
  productId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string slug = 4;
   */
  slug = "";

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 5;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 6;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue shortDescription = 7;
   */
  shortDescription?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 8;
   */
  description?: string;

  /**
   * @generated from field: string unitPrice = 9;
   */
  unitPrice = "";

  /**
   * @generated from field: google.protobuf.StringValue discountPrice = 10;
   */
  discountPrice?: string;

  /**
   * @generated from field: int32 quantity = 11;
   */
  quantity = 0;

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse document = 12;
   */
  document?: DocumentInfoResponse;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: vklink.store.api.v1.products.responses.VariantResponse variant = 51;
   */
  variant?: VariantResponse;

  constructor(data?: PartialMessage<AdminProductBundleItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.AdminProductBundleItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 6, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 7, name: "shortDescription", kind: "message", T: StringValue },
    { no: 8, name: "description", kind: "message", T: StringValue },
    { no: 9, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "discountPrice", kind: "message", T: StringValue },
    { no: 11, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "document", kind: "message", T: DocumentInfoResponse },
    { no: 51, name: "variant", kind: "message", T: VariantResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminProductBundleItemResponse {
    return new AdminProductBundleItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminProductBundleItemResponse {
    return new AdminProductBundleItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminProductBundleItemResponse {
    return new AdminProductBundleItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminProductBundleItemResponse | PlainMessage<AdminProductBundleItemResponse> | undefined, b: AdminProductBundleItemResponse | PlainMessage<AdminProductBundleItemResponse> | undefined): boolean {
    return proto3.util.equals(AdminProductBundleItemResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.AdminProductResponse
 */
export class AdminProductResponse extends Message<AdminProductResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 4;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 5;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue shortDescription = 6;
   */
  shortDescription?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 7;
   */
  description?: string;

  /**
   * @generated from field: string unitPrice = 8;
   */
  unitPrice = "";

  /**
   * @generated from field: google.protobuf.StringValue discountPrice = 9;
   */
  discountPrice?: string;

  /**
   * @generated from field: google.protobuf.StringValue vatPercent = 10;
   */
  vatPercent?: string;

  /**
   * @generated from field: repeated vklink.common.responses.DocumentInfoResponse documents = 11;
   */
  documents: DocumentInfoResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse thumbnail = 12;
   */
  thumbnail?: DocumentInfoResponse;

  /**
   * @generated from field: bool enabled = 13;
   */
  enabled = false;

  /**
   * @generated from field: int32 order = 14;
   */
  order = 0;

  /**
   * @generated from field: float rate = 15;
   */
  rate = 0;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.store.api.v1.products.responses.AdminProductCategoryResponse categories = 51;
   */
  categories: AdminProductCategoryResponse[] = [];

  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductVariantResponse variants = 52;
   */
  variants: ProductVariantResponse[] = [];

  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.AdminProductTranslationResponse translations = 53;
   */
  translations: AdminProductTranslationResponse[] = [];

  /**
   * audit fields: from 63 to 70
   *
   * @generated from field: vklink.common.responses.ActorInfoResponse creator = 61;
   */
  creator?: ActorInfoResponse;

  /**
   * @generated from field: vklink.common.responses.ActorInfoResponse updater = 62;
   */
  updater?: ActorInfoResponse;

  constructor(data?: PartialMessage<AdminProductResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.AdminProductResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 5, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 6, name: "shortDescription", kind: "message", T: StringValue },
    { no: 7, name: "description", kind: "message", T: StringValue },
    { no: 8, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "discountPrice", kind: "message", T: StringValue },
    { no: 10, name: "vatPercent", kind: "message", T: StringValue },
    { no: 11, name: "documents", kind: "message", T: DocumentInfoResponse, repeated: true },
    { no: 12, name: "thumbnail", kind: "message", T: DocumentInfoResponse },
    { no: 13, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "rate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 51, name: "categories", kind: "message", T: AdminProductCategoryResponse, repeated: true },
    { no: 52, name: "variants", kind: "message", T: ProductVariantResponse, repeated: true },
    { no: 53, name: "translations", kind: "message", T: AdminProductTranslationResponse, repeated: true },
    { no: 61, name: "creator", kind: "message", T: ActorInfoResponse },
    { no: 62, name: "updater", kind: "message", T: ActorInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminProductResponse {
    return new AdminProductResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminProductResponse {
    return new AdminProductResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminProductResponse {
    return new AdminProductResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminProductResponse | PlainMessage<AdminProductResponse> | undefined, b: AdminProductResponse | PlainMessage<AdminProductResponse> | undefined): boolean {
    return proto3.util.equals(AdminProductResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.AdminProductTranslationResponse
 */
export class AdminProductTranslationResponse extends Message<AdminProductTranslationResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: vklink.grpc.enums.LanguageCode languageCode = 2;
   */
  languageCode = LanguageCode.UNSPECIFIED;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue shortDescription = 4;
   */
  shortDescription?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 5;
   */
  description?: string;

  constructor(data?: PartialMessage<AdminProductTranslationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.AdminProductTranslationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "languageCode", kind: "enum", T: proto3.getEnumType(LanguageCode) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shortDescription", kind: "message", T: StringValue },
    { no: 5, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminProductTranslationResponse {
    return new AdminProductTranslationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminProductTranslationResponse {
    return new AdminProductTranslationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminProductTranslationResponse {
    return new AdminProductTranslationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminProductTranslationResponse | PlainMessage<AdminProductTranslationResponse> | undefined, b: AdminProductTranslationResponse | PlainMessage<AdminProductTranslationResponse> | undefined): boolean {
    return proto3.util.equals(AdminProductTranslationResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.SingleAdminProductResponse
 */
export class SingleAdminProductResponse extends Message<SingleAdminProductResponse> {
  /**
   * @generated from field: vklink.store.api.v1.products.responses.AdminProductResponse value = 1;
   */
  value?: AdminProductResponse;

  constructor(data?: PartialMessage<SingleAdminProductResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.SingleAdminProductResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: AdminProductResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleAdminProductResponse {
    return new SingleAdminProductResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleAdminProductResponse {
    return new SingleAdminProductResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleAdminProductResponse {
    return new SingleAdminProductResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleAdminProductResponse | PlainMessage<SingleAdminProductResponse> | undefined, b: SingleAdminProductResponse | PlainMessage<SingleAdminProductResponse> | undefined): boolean {
    return proto3.util.equals(SingleAdminProductResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ListAdminProductBundleItemsResponse
 */
export class ListAdminProductBundleItemsResponse extends Message<ListAdminProductBundleItemsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.AdminProductBundleItemResponse value = 1;
   */
  value: AdminProductBundleItemResponse[] = [];

  constructor(data?: PartialMessage<ListAdminProductBundleItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ListAdminProductBundleItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: AdminProductBundleItemResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAdminProductBundleItemsResponse {
    return new ListAdminProductBundleItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAdminProductBundleItemsResponse {
    return new ListAdminProductBundleItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAdminProductBundleItemsResponse {
    return new ListAdminProductBundleItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAdminProductBundleItemsResponse | PlainMessage<ListAdminProductBundleItemsResponse> | undefined, b: ListAdminProductBundleItemsResponse | PlainMessage<ListAdminProductBundleItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListAdminProductBundleItemsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ListAdminProductsResponse
 */
export class ListAdminProductsResponse extends Message<ListAdminProductsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.AdminProductResponse value = 1;
   */
  value: AdminProductResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListAdminProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ListAdminProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: AdminProductResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAdminProductsResponse {
    return new ListAdminProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAdminProductsResponse {
    return new ListAdminProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAdminProductsResponse {
    return new ListAdminProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAdminProductsResponse | PlainMessage<ListAdminProductsResponse> | undefined, b: ListAdminProductsResponse | PlainMessage<ListAdminProductsResponse> | undefined): boolean {
    return proto3.util.equals(ListAdminProductsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.MultipleVariantsResponse
 */
export class MultipleVariantsResponse extends Message<MultipleVariantsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.VariantResponse value = 1;
   */
  value: VariantResponse[] = [];

  constructor(data?: PartialMessage<MultipleVariantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.MultipleVariantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: VariantResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipleVariantsResponse {
    return new MultipleVariantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipleVariantsResponse {
    return new MultipleVariantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipleVariantsResponse {
    return new MultipleVariantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultipleVariantsResponse | PlainMessage<MultipleVariantsResponse> | undefined, b: MultipleVariantsResponse | PlainMessage<MultipleVariantsResponse> | undefined): boolean {
    return proto3.util.equals(MultipleVariantsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ProductCategoryResponse
 */
export class ProductCategoryResponse extends Message<ProductCategoryResponse> {
  /**
   * @generated from field: string productId = 1;
   */
  productId = "";

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse thumbnail = 2;
   */
  thumbnail?: DocumentInfoResponse;

  /**
   * @generated from field: repeated vklink.store.api.v1.categories.responses.CategoryResponse categories = 3;
   */
  categories: CategoryResponse[] = [];

  constructor(data?: PartialMessage<ProductCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ProductCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "thumbnail", kind: "message", T: DocumentInfoResponse },
    { no: 3, name: "categories", kind: "message", T: CategoryResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCategoryResponse {
    return new ProductCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCategoryResponse {
    return new ProductCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCategoryResponse {
    return new ProductCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCategoryResponse | PlainMessage<ProductCategoryResponse> | undefined, b: ProductCategoryResponse | PlainMessage<ProductCategoryResponse> | undefined): boolean {
    return proto3.util.equals(ProductCategoryResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.CategoriesByProductIdsResponse
 */
export class CategoriesByProductIdsResponse extends Message<CategoriesByProductIdsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductCategoryResponse value = 2;
   */
  value: ProductCategoryResponse[] = [];

  constructor(data?: PartialMessage<CategoriesByProductIdsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.CategoriesByProductIdsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "value", kind: "message", T: ProductCategoryResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CategoriesByProductIdsResponse {
    return new CategoriesByProductIdsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CategoriesByProductIdsResponse {
    return new CategoriesByProductIdsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CategoriesByProductIdsResponse {
    return new CategoriesByProductIdsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CategoriesByProductIdsResponse | PlainMessage<CategoriesByProductIdsResponse> | undefined, b: CategoriesByProductIdsResponse | PlainMessage<CategoriesByProductIdsResponse> | undefined): boolean {
    return proto3.util.equals(CategoriesByProductIdsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ProductReportResponse
 */
export class ProductReportResponse extends Message<ProductReportResponse> {
  /**
   * @generated from field: string productId = 1;
   */
  productId = "";

  /**
   * @generated from field: string productName = 2;
   */
  productName = "";

  /**
   * @generated from field: google.protobuf.StringValue productUrl = 3;
   */
  productUrl?: string;

  /**
   * @generated from field: google.protobuf.StringValue totalPrice = 4;
   */
  totalPrice?: string;

  /**
   * @generated from field: string productCategoryId = 5;
   */
  productCategoryId = "";

  /**
   * @generated from field: string productCategoryName = 6;
   */
  productCategoryName = "";

  /**
   * @generated from field: google.protobuf.StringValue avgOrderValue = 7;
   */
  avgOrderValue?: string;

  /**
   * @generated from field: google.protobuf.StringValue quantitySold = 8;
   */
  quantitySold?: string;

  /**
   * @generated from field: google.protobuf.StringValue customerSatisfactionRating = 9;
   */
  customerSatisfactionRating?: string;

  /**
   * @generated from field: google.protobuf.StringValue customerRetentionRate = 10;
   */
  customerRetentionRate?: string;

  /**
   * @generated from field: google.protobuf.StringValue storeId = 11;
   */
  storeId?: string;

  /**
   * @generated from field: google.protobuf.StringValue storeName = 12;
   */
  storeName?: string;

  constructor(data?: PartialMessage<ProductReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ProductReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "productName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "productUrl", kind: "message", T: StringValue },
    { no: 4, name: "totalPrice", kind: "message", T: StringValue },
    { no: 5, name: "productCategoryId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "productCategoryName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "avgOrderValue", kind: "message", T: StringValue },
    { no: 8, name: "quantitySold", kind: "message", T: StringValue },
    { no: 9, name: "customerSatisfactionRating", kind: "message", T: StringValue },
    { no: 10, name: "customerRetentionRate", kind: "message", T: StringValue },
    { no: 11, name: "storeId", kind: "message", T: StringValue },
    { no: 12, name: "storeName", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductReportResponse {
    return new ProductReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductReportResponse {
    return new ProductReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductReportResponse {
    return new ProductReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductReportResponse | PlainMessage<ProductReportResponse> | undefined, b: ProductReportResponse | PlainMessage<ProductReportResponse> | undefined): boolean {
    return proto3.util.equals(ProductReportResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ListProductReportsResponse
 */
export class ListProductReportsResponse extends Message<ListProductReportsResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductReportResponse value = 1;
   */
  value: ProductReportResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListProductReportsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ListProductReportsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ProductReportResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProductReportsResponse {
    return new ListProductReportsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProductReportsResponse {
    return new ListProductReportsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProductReportsResponse {
    return new ListProductReportsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProductReportsResponse | PlainMessage<ListProductReportsResponse> | undefined, b: ListProductReportsResponse | PlainMessage<ListProductReportsResponse> | undefined): boolean {
    return proto3.util.equals(ListProductReportsResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ExportProductReportResponse
 */
export class ExportProductReportResponse extends Message<ExportProductReportResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<ExportProductReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ExportProductReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportProductReportResponse {
    return new ExportProductReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportProductReportResponse {
    return new ExportProductReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportProductReportResponse {
    return new ExportProductReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportProductReportResponse | PlainMessage<ExportProductReportResponse> | undefined, b: ExportProductReportResponse | PlainMessage<ExportProductReportResponse> | undefined): boolean {
    return proto3.util.equals(ExportProductReportResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ProductReviewResponse
 */
export class ProductReviewResponse extends Message<ProductReviewResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string comment = 2;
   */
  comment = "";

  /**
   * @generated from field: int32 rate = 3;
   */
  rate = 0;

  /**
   * @generated from field: string userId = 4;
   */
  userId = "";

  /**
   * @generated from field: string userFullName = 5;
   */
  userFullName = "";

  /**
   * @generated from field: string orderId = 6;
   */
  orderId = "";

  /**
   * @generated from field: string orderNumber = 7;
   */
  orderNumber = "";

  /**
   * @generated from field: google.protobuf.Timestamp reviewDate = 8;
   */
  reviewDate?: Timestamp;

  /**
   * @generated from field: repeated vklink.common.responses.DocumentInfoResponse documents = 51;
   */
  documents: DocumentInfoResponse[] = [];

  constructor(data?: PartialMessage<ProductReviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ProductReviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "userFullName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "orderId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "orderNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "reviewDate", kind: "message", T: Timestamp },
    { no: 51, name: "documents", kind: "message", T: DocumentInfoResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductReviewResponse {
    return new ProductReviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductReviewResponse {
    return new ProductReviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductReviewResponse {
    return new ProductReviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductReviewResponse | PlainMessage<ProductReviewResponse> | undefined, b: ProductReviewResponse | PlainMessage<ProductReviewResponse> | undefined): boolean {
    return proto3.util.equals(ProductReviewResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.SingleProductReviewResponse
 */
export class SingleProductReviewResponse extends Message<SingleProductReviewResponse> {
  /**
   * @generated from field: vklink.store.api.v1.products.responses.ProductReviewResponse value = 1;
   */
  value?: ProductReviewResponse;

  constructor(data?: PartialMessage<SingleProductReviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.SingleProductReviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ProductReviewResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleProductReviewResponse {
    return new SingleProductReviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleProductReviewResponse {
    return new SingleProductReviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleProductReviewResponse {
    return new SingleProductReviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleProductReviewResponse | PlainMessage<SingleProductReviewResponse> | undefined, b: SingleProductReviewResponse | PlainMessage<SingleProductReviewResponse> | undefined): boolean {
    return proto3.util.equals(SingleProductReviewResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.products.responses.ListProductReviewResponse
 */
export class ListProductReviewResponse extends Message<ListProductReviewResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.products.responses.ProductReviewResponse value = 1;
   */
  value: ProductReviewResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListProductReviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.products.responses.ListProductReviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ProductReviewResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProductReviewResponse {
    return new ListProductReviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProductReviewResponse {
    return new ListProductReviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProductReviewResponse {
    return new ListProductReviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProductReviewResponse | PlainMessage<ListProductReviewResponse> | undefined, b: ListProductReviewResponse | PlainMessage<ListProductReviewResponse> | undefined): boolean {
    return proto3.util.equals(ListProductReviewResponse, a, b);
  }
}

