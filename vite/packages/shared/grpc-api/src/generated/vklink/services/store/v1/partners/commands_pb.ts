// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/store/v1/partners/commands.proto (package vklink.store.api.v1.partners.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.store.api.v1.partners.commands.CreatePartnerCommand
 */
export class CreatePartnerCommand extends Message<CreatePartnerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  constructor(data?: PartialMessage<CreatePartnerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.partners.commands.CreatePartnerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePartnerCommand {
    return new CreatePartnerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePartnerCommand {
    return new CreatePartnerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePartnerCommand {
    return new CreatePartnerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePartnerCommand | PlainMessage<CreatePartnerCommand> | undefined, b: CreatePartnerCommand | PlainMessage<CreatePartnerCommand> | undefined): boolean {
    return proto3.util.equals(CreatePartnerCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.partners.commands.UpdatePartnerCommand
 */
export class UpdatePartnerCommand extends Message<UpdatePartnerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  constructor(data?: PartialMessage<UpdatePartnerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.partners.commands.UpdatePartnerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePartnerCommand {
    return new UpdatePartnerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePartnerCommand {
    return new UpdatePartnerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePartnerCommand {
    return new UpdatePartnerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePartnerCommand | PlainMessage<UpdatePartnerCommand> | undefined, b: UpdatePartnerCommand | PlainMessage<UpdatePartnerCommand> | undefined): boolean {
    return proto3.util.equals(UpdatePartnerCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.partners.commands.EnablePartnerCommand
 */
export class EnablePartnerCommand extends Message<EnablePartnerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<EnablePartnerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.partners.commands.EnablePartnerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnablePartnerCommand {
    return new EnablePartnerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnablePartnerCommand {
    return new EnablePartnerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnablePartnerCommand {
    return new EnablePartnerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: EnablePartnerCommand | PlainMessage<EnablePartnerCommand> | undefined, b: EnablePartnerCommand | PlainMessage<EnablePartnerCommand> | undefined): boolean {
    return proto3.util.equals(EnablePartnerCommand, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.partners.commands.DisablePartnerCommand
 */
export class DisablePartnerCommand extends Message<DisablePartnerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DisablePartnerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.partners.commands.DisablePartnerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisablePartnerCommand {
    return new DisablePartnerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisablePartnerCommand {
    return new DisablePartnerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisablePartnerCommand {
    return new DisablePartnerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DisablePartnerCommand | PlainMessage<DisablePartnerCommand> | undefined, b: DisablePartnerCommand | PlainMessage<DisablePartnerCommand> | undefined): boolean {
    return proto3.util.equals(DisablePartnerCommand, a, b);
  }
}

