// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/identity/v1/roles/commands.proto (package vklink.identity.api.v1.roles.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.identity.api.v1.roles.commands.CreateRoleCommand
 */
export class CreateRoleCommand extends Message<CreateRoleCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  /**
   * @generated from field: bool isEnabled = 4;
   */
  isEnabled = false;

  /**
   * @generated from field: repeated string permissions = 5;
   */
  permissions: string[] = [];

  constructor(data?: PartialMessage<CreateRoleCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.commands.CreateRoleCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
    { no: 4, name: "isEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoleCommand {
    return new CreateRoleCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoleCommand {
    return new CreateRoleCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoleCommand {
    return new CreateRoleCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoleCommand | PlainMessage<CreateRoleCommand> | undefined, b: CreateRoleCommand | PlainMessage<CreateRoleCommand> | undefined): boolean {
    return proto3.util.equals(CreateRoleCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.roles.commands.UpdateRoleCommand
 */
export class UpdateRoleCommand extends Message<UpdateRoleCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  /**
   * @generated from field: bool isEnabled = 4;
   */
  isEnabled = false;

  /**
   * @generated from field: repeated string permissions = 5;
   */
  permissions: string[] = [];

  constructor(data?: PartialMessage<UpdateRoleCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.commands.UpdateRoleCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
    { no: 4, name: "isEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleCommand {
    return new UpdateRoleCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleCommand {
    return new UpdateRoleCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleCommand {
    return new UpdateRoleCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleCommand | PlainMessage<UpdateRoleCommand> | undefined, b: UpdateRoleCommand | PlainMessage<UpdateRoleCommand> | undefined): boolean {
    return proto3.util.equals(UpdateRoleCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.roles.commands.AssignOrRevokePermissionsCommand
 */
export class AssignOrRevokePermissionsCommand extends Message<AssignOrRevokePermissionsCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated string permissions = 2;
   */
  permissions: string[] = [];

  constructor(data?: PartialMessage<AssignOrRevokePermissionsCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.commands.AssignOrRevokePermissionsCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignOrRevokePermissionsCommand {
    return new AssignOrRevokePermissionsCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignOrRevokePermissionsCommand {
    return new AssignOrRevokePermissionsCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignOrRevokePermissionsCommand {
    return new AssignOrRevokePermissionsCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AssignOrRevokePermissionsCommand | PlainMessage<AssignOrRevokePermissionsCommand> | undefined, b: AssignOrRevokePermissionsCommand | PlainMessage<AssignOrRevokePermissionsCommand> | undefined): boolean {
    return proto3.util.equals(AssignOrRevokePermissionsCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.roles.commands.EnableRoleCommand
 */
export class EnableRoleCommand extends Message<EnableRoleCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue remarks = 2;
   */
  remarks?: string;

  constructor(data?: PartialMessage<EnableRoleCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.commands.EnableRoleCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "remarks", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableRoleCommand {
    return new EnableRoleCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableRoleCommand {
    return new EnableRoleCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableRoleCommand {
    return new EnableRoleCommand().fromJsonString(jsonString, options);
  }

  static equals(a: EnableRoleCommand | PlainMessage<EnableRoleCommand> | undefined, b: EnableRoleCommand | PlainMessage<EnableRoleCommand> | undefined): boolean {
    return proto3.util.equals(EnableRoleCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.roles.commands.DisableRoleCommand
 */
export class DisableRoleCommand extends Message<DisableRoleCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue remarks = 2;
   */
  remarks?: string;

  constructor(data?: PartialMessage<DisableRoleCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.commands.DisableRoleCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "remarks", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableRoleCommand {
    return new DisableRoleCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableRoleCommand {
    return new DisableRoleCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableRoleCommand {
    return new DisableRoleCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DisableRoleCommand | PlainMessage<DisableRoleCommand> | undefined, b: DisableRoleCommand | PlainMessage<DisableRoleCommand> | undefined): boolean {
    return proto3.util.equals(DisableRoleCommand, a, b);
  }
}

