// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/blog/v1/posts/queries.proto (package vklink.blog.api.v1.posts.queries, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { FilteringParams } from "../../../../libs/data/params/filtering_params_pb";
import { SortingParams } from "../../../../libs/data/params/sorting_params_pb";
import { PagingParams } from "../../../../libs/data/params/paging_params_pb";

/**
 * @generated from message vklink.blog.api.v1.posts.queries.FindPostByIdQuery
 */
export class FindPostByIdQuery extends Message<FindPostByIdQuery> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<FindPostByIdQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.queries.FindPostByIdQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindPostByIdQuery {
    return new FindPostByIdQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindPostByIdQuery {
    return new FindPostByIdQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindPostByIdQuery {
    return new FindPostByIdQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FindPostByIdQuery | PlainMessage<FindPostByIdQuery> | undefined, b: FindPostByIdQuery | PlainMessage<FindPostByIdQuery> | undefined): boolean {
    return proto3.util.equals(FindPostByIdQuery, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.queries.GetPostsQuery
 */
export class GetPostsQuery extends Message<GetPostsQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  /**
   * @generated from field: repeated vklink.data.params.SortingParams sortBy = 2;
   */
  sortBy: SortingParams[] = [];

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 3;
   */
  paging?: PagingParams;

  constructor(data?: PartialMessage<GetPostsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.queries.GetPostsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
    { no: 2, name: "sortBy", kind: "message", T: SortingParams, repeated: true },
    { no: 3, name: "paging", kind: "message", T: PagingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsQuery {
    return new GetPostsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsQuery {
    return new GetPostsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsQuery {
    return new GetPostsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsQuery | PlainMessage<GetPostsQuery> | undefined, b: GetPostsQuery | PlainMessage<GetPostsQuery> | undefined): boolean {
    return proto3.util.equals(GetPostsQuery, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.queries.GetCommentsByPostIdQuery
 */
export class GetCommentsByPostIdQuery extends Message<GetCommentsByPostIdQuery> {
  /**
   * @generated from field: string postId = 1;
   */
  postId = "";

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 3;
   */
  paging?: PagingParams;

  constructor(data?: PartialMessage<GetCommentsByPostIdQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.queries.GetCommentsByPostIdQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "paging", kind: "message", T: PagingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentsByPostIdQuery {
    return new GetCommentsByPostIdQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentsByPostIdQuery {
    return new GetCommentsByPostIdQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentsByPostIdQuery {
    return new GetCommentsByPostIdQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentsByPostIdQuery | PlainMessage<GetCommentsByPostIdQuery> | undefined, b: GetCommentsByPostIdQuery | PlainMessage<GetCommentsByPostIdQuery> | undefined): boolean {
    return proto3.util.equals(GetCommentsByPostIdQuery, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.queries.FindPublishedPostBySlugQuery
 */
export class FindPublishedPostBySlugQuery extends Message<FindPublishedPostBySlugQuery> {
  /**
   * @generated from field: string slug = 1;
   */
  slug = "";

  constructor(data?: PartialMessage<FindPublishedPostBySlugQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.queries.FindPublishedPostBySlugQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindPublishedPostBySlugQuery {
    return new FindPublishedPostBySlugQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindPublishedPostBySlugQuery {
    return new FindPublishedPostBySlugQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindPublishedPostBySlugQuery {
    return new FindPublishedPostBySlugQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FindPublishedPostBySlugQuery | PlainMessage<FindPublishedPostBySlugQuery> | undefined, b: FindPublishedPostBySlugQuery | PlainMessage<FindPublishedPostBySlugQuery> | undefined): boolean {
    return proto3.util.equals(FindPublishedPostBySlugQuery, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.queries.GetPublishedPostsQuery
 */
export class GetPublishedPostsQuery extends Message<GetPublishedPostsQuery> {
  /**
   * @generated from field: vklink.data.params.FilteringParams filter = 1;
   */
  filter?: FilteringParams;

  /**
   * @generated from field: vklink.data.params.PagingParams paging = 3;
   */
  paging?: PagingParams;

  constructor(data?: PartialMessage<GetPublishedPostsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.queries.GetPublishedPostsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FilteringParams },
    { no: 3, name: "paging", kind: "message", T: PagingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPublishedPostsQuery {
    return new GetPublishedPostsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPublishedPostsQuery {
    return new GetPublishedPostsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPublishedPostsQuery {
    return new GetPublishedPostsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GetPublishedPostsQuery | PlainMessage<GetPublishedPostsQuery> | undefined, b: GetPublishedPostsQuery | PlainMessage<GetPublishedPostsQuery> | undefined): boolean {
    return proto3.util.equals(GetPublishedPostsQuery, a, b);
  }
}

