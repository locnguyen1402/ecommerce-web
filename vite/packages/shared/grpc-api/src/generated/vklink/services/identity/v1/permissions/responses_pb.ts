// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/identity/v1/permissions/responses.proto (package vklink.identity.api.v1.permissions.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.identity.api.v1.permissions.responses.PermissionGroupResponse
 */
export class PermissionGroupResponse extends Message<PermissionGroupResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 2;
   */
  description?: string;

  /**
   * @generated from field: repeated vklink.identity.api.v1.permissions.responses.PermissionResponse permissions = 3;
   */
  permissions: PermissionResponse[] = [];

  constructor(data?: PartialMessage<PermissionGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissions.responses.PermissionGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "message", T: StringValue },
    { no: 3, name: "permissions", kind: "message", T: PermissionResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionGroupResponse {
    return new PermissionGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionGroupResponse {
    return new PermissionGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionGroupResponse {
    return new PermissionGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionGroupResponse | PlainMessage<PermissionGroupResponse> | undefined, b: PermissionGroupResponse | PlainMessage<PermissionGroupResponse> | undefined): boolean {
    return proto3.util.equals(PermissionGroupResponse, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.permissions.responses.PermissionResponse
 */
export class PermissionResponse extends Message<PermissionResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  constructor(data?: PartialMessage<PermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissions.responses.PermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionResponse {
    return new PermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionResponse {
    return new PermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionResponse {
    return new PermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionResponse | PlainMessage<PermissionResponse> | undefined, b: PermissionResponse | PlainMessage<PermissionResponse> | undefined): boolean {
    return proto3.util.equals(PermissionResponse, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.permissions.responses.ListPermissionGroupResponse
 */
export class ListPermissionGroupResponse extends Message<ListPermissionGroupResponse> {
  /**
   * @generated from field: repeated vklink.identity.api.v1.permissions.responses.PermissionGroupResponse value = 1;
   */
  value: PermissionGroupResponse[] = [];

  constructor(data?: PartialMessage<ListPermissionGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.permissions.responses.ListPermissionGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: PermissionGroupResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPermissionGroupResponse {
    return new ListPermissionGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPermissionGroupResponse {
    return new ListPermissionGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPermissionGroupResponse {
    return new ListPermissionGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPermissionGroupResponse | PlainMessage<ListPermissionGroupResponse> | undefined, b: ListPermissionGroupResponse | PlainMessage<ListPermissionGroupResponse> | undefined): boolean {
    return proto3.util.equals(ListPermissionGroupResponse, a, b);
  }
}

