// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/blog/v1/comments/commands.proto (package vklink.blog.api.v1.comments.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.blog.api.v1.comments.commands.ReplyCommentCommand
 */
export class ReplyCommentCommand extends Message<ReplyCommentCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: string parentId = 51;
   */
  parentId = "";

  constructor(data?: PartialMessage<ReplyCommentCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.comments.commands.ReplyCommentCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 51, name: "parentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplyCommentCommand {
    return new ReplyCommentCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplyCommentCommand {
    return new ReplyCommentCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplyCommentCommand {
    return new ReplyCommentCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ReplyCommentCommand | PlainMessage<ReplyCommentCommand> | undefined, b: ReplyCommentCommand | PlainMessage<ReplyCommentCommand> | undefined): boolean {
    return proto3.util.equals(ReplyCommentCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.comments.commands.UpdateCommentCommand
 */
export class UpdateCommentCommand extends Message<UpdateCommentCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<UpdateCommentCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.comments.commands.UpdateCommentCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCommentCommand {
    return new UpdateCommentCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCommentCommand {
    return new UpdateCommentCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCommentCommand {
    return new UpdateCommentCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCommentCommand | PlainMessage<UpdateCommentCommand> | undefined, b: UpdateCommentCommand | PlainMessage<UpdateCommentCommand> | undefined): boolean {
    return proto3.util.equals(UpdateCommentCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.comments.commands.DeleteCommentCommand
 */
export class DeleteCommentCommand extends Message<DeleteCommentCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteCommentCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.comments.commands.DeleteCommentCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCommentCommand {
    return new DeleteCommentCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCommentCommand {
    return new DeleteCommentCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCommentCommand {
    return new DeleteCommentCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCommentCommand | PlainMessage<DeleteCommentCommand> | undefined, b: DeleteCommentCommand | PlainMessage<DeleteCommentCommand> | undefined): boolean {
    return proto3.util.equals(DeleteCommentCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.comments.commands.ReactToCommentCommand
 */
export class ReactToCommentCommand extends Message<ReactToCommentCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<ReactToCommentCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.comments.commands.ReactToCommentCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactToCommentCommand {
    return new ReactToCommentCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactToCommentCommand {
    return new ReactToCommentCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactToCommentCommand {
    return new ReactToCommentCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ReactToCommentCommand | PlainMessage<ReactToCommentCommand> | undefined, b: ReactToCommentCommand | PlainMessage<ReactToCommentCommand> | undefined): boolean {
    return proto3.util.equals(ReactToCommentCommand, a, b);
  }
}

