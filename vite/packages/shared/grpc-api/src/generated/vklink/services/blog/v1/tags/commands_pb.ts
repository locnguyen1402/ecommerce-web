// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/blog/v1/tags/commands.proto (package vklink.blog.api.v1.tags.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.blog.api.v1.tags.commands.CreateTagCommand
 */
export class CreateTagCommand extends Message<CreateTagCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: google.protobuf.StringValue parentId = 51;
   */
  parentId?: string;

  constructor(data?: PartialMessage<CreateTagCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.tags.commands.CreateTagCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
    { no: 51, name: "parentId", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTagCommand {
    return new CreateTagCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTagCommand {
    return new CreateTagCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTagCommand {
    return new CreateTagCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTagCommand | PlainMessage<CreateTagCommand> | undefined, b: CreateTagCommand | PlainMessage<CreateTagCommand> | undefined): boolean {
    return proto3.util.equals(CreateTagCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.tags.commands.UpdateTagCommand
 */
export class UpdateTagCommand extends Message<UpdateTagCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  constructor(data?: PartialMessage<UpdateTagCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.tags.commands.UpdateTagCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTagCommand {
    return new UpdateTagCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTagCommand {
    return new UpdateTagCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTagCommand {
    return new UpdateTagCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTagCommand | PlainMessage<UpdateTagCommand> | undefined, b: UpdateTagCommand | PlainMessage<UpdateTagCommand> | undefined): boolean {
    return proto3.util.equals(UpdateTagCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.tags.commands.DeleteTagCommand
 */
export class DeleteTagCommand extends Message<DeleteTagCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteTagCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.tags.commands.DeleteTagCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTagCommand {
    return new DeleteTagCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTagCommand {
    return new DeleteTagCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTagCommand {
    return new DeleteTagCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTagCommand | PlainMessage<DeleteTagCommand> | undefined, b: DeleteTagCommand | PlainMessage<DeleteTagCommand> | undefined): boolean {
    return proto3.util.equals(DeleteTagCommand, a, b);
  }
}

