// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/identity/v1/accounts/commands.proto (package vklink.identity.api.v1.accounts.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SocialProvider } from "../../../../libs/common/enums/social_provider_pb";

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.RegisterSocialAccountCommand
 */
export class RegisterSocialAccountCommand extends Message<RegisterSocialAccountCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string assertion = 1;
   */
  assertion = "";

  /**
   * @generated from field: vklink.grpc.enums.SocialProvider socialProvider = 2;
   */
  socialProvider = SocialProvider.UNSPECIFIED;

  constructor(data?: PartialMessage<RegisterSocialAccountCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.RegisterSocialAccountCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assertion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "socialProvider", kind: "enum", T: proto3.getEnumType(SocialProvider) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterSocialAccountCommand {
    return new RegisterSocialAccountCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterSocialAccountCommand {
    return new RegisterSocialAccountCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterSocialAccountCommand {
    return new RegisterSocialAccountCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterSocialAccountCommand | PlainMessage<RegisterSocialAccountCommand> | undefined, b: RegisterSocialAccountCommand | PlainMessage<RegisterSocialAccountCommand> | undefined): boolean {
    return proto3.util.equals(RegisterSocialAccountCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.ChangePasswordCommand
 */
export class ChangePasswordCommand extends Message<ChangePasswordCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string currentPassword = 1;
   */
  currentPassword = "";

  /**
   * @generated from field: string newPassword = 2;
   */
  newPassword = "";

  /**
   * @generated from field: string userId = 3;
   */
  userId = "";

  constructor(data?: PartialMessage<ChangePasswordCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.ChangePasswordCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currentPassword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "newPassword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordCommand {
    return new ChangePasswordCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordCommand {
    return new ChangePasswordCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordCommand {
    return new ChangePasswordCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePasswordCommand | PlainMessage<ChangePasswordCommand> | undefined, b: ChangePasswordCommand | PlainMessage<ChangePasswordCommand> | undefined): boolean {
    return proto3.util.equals(ChangePasswordCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.ResetPasswordCommand
 */
export class ResetPasswordCommand extends Message<ResetPasswordCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string password = 1;
   */
  password = "";

  /**
   * @generated from field: string userId = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<ResetPasswordCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.ResetPasswordCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetPasswordCommand {
    return new ResetPasswordCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetPasswordCommand {
    return new ResetPasswordCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetPasswordCommand {
    return new ResetPasswordCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ResetPasswordCommand | PlainMessage<ResetPasswordCommand> | undefined, b: ResetPasswordCommand | PlainMessage<ResetPasswordCommand> | undefined): boolean {
    return proto3.util.equals(ResetPasswordCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.ForgotPasswordRequestCommand
 */
export class ForgotPasswordRequestCommand extends Message<ForgotPasswordRequestCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string userName = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<ForgotPasswordRequestCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.ForgotPasswordRequestCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForgotPasswordRequestCommand {
    return new ForgotPasswordRequestCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForgotPasswordRequestCommand {
    return new ForgotPasswordRequestCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForgotPasswordRequestCommand {
    return new ForgotPasswordRequestCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ForgotPasswordRequestCommand | PlainMessage<ForgotPasswordRequestCommand> | undefined, b: ForgotPasswordRequestCommand | PlainMessage<ForgotPasswordRequestCommand> | undefined): boolean {
    return proto3.util.equals(ForgotPasswordRequestCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.ForgotPasswordConfirmOtpCommand
 */
export class ForgotPasswordConfirmOtpCommand extends Message<ForgotPasswordConfirmOtpCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string userName = 1;
   */
  userName = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  constructor(data?: PartialMessage<ForgotPasswordConfirmOtpCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.ForgotPasswordConfirmOtpCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForgotPasswordConfirmOtpCommand {
    return new ForgotPasswordConfirmOtpCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForgotPasswordConfirmOtpCommand {
    return new ForgotPasswordConfirmOtpCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForgotPasswordConfirmOtpCommand {
    return new ForgotPasswordConfirmOtpCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ForgotPasswordConfirmOtpCommand | PlainMessage<ForgotPasswordConfirmOtpCommand> | undefined, b: ForgotPasswordConfirmOtpCommand | PlainMessage<ForgotPasswordConfirmOtpCommand> | undefined): boolean {
    return proto3.util.equals(ForgotPasswordConfirmOtpCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.ForgotPasswordChangePasswordCommand
 */
export class ForgotPasswordChangePasswordCommand extends Message<ForgotPasswordChangePasswordCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string userName = 1;
   */
  userName = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string newPassword = 3;
   */
  newPassword = "";

  constructor(data?: PartialMessage<ForgotPasswordChangePasswordCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.ForgotPasswordChangePasswordCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "newPassword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForgotPasswordChangePasswordCommand {
    return new ForgotPasswordChangePasswordCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForgotPasswordChangePasswordCommand {
    return new ForgotPasswordChangePasswordCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForgotPasswordChangePasswordCommand {
    return new ForgotPasswordChangePasswordCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ForgotPasswordChangePasswordCommand | PlainMessage<ForgotPasswordChangePasswordCommand> | undefined, b: ForgotPasswordChangePasswordCommand | PlainMessage<ForgotPasswordChangePasswordCommand> | undefined): boolean {
    return proto3.util.equals(ForgotPasswordChangePasswordCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.RevokeTokenCommand
 */
export class RevokeTokenCommand extends Message<RevokeTokenCommand> {
  constructor(data?: PartialMessage<RevokeTokenCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.RevokeTokenCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeTokenCommand {
    return new RevokeTokenCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeTokenCommand {
    return new RevokeTokenCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeTokenCommand {
    return new RevokeTokenCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeTokenCommand | PlainMessage<RevokeTokenCommand> | undefined, b: RevokeTokenCommand | PlainMessage<RevokeTokenCommand> | undefined): boolean {
    return proto3.util.equals(RevokeTokenCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.RegisterAccountCommand
 */
export class RegisterAccountCommand extends Message<RegisterAccountCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string phoneNumber = 1;
   */
  phoneNumber = "";

  constructor(data?: PartialMessage<RegisterAccountCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.RegisterAccountCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phoneNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAccountCommand {
    return new RegisterAccountCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAccountCommand {
    return new RegisterAccountCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAccountCommand {
    return new RegisterAccountCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAccountCommand | PlainMessage<RegisterAccountCommand> | undefined, b: RegisterAccountCommand | PlainMessage<RegisterAccountCommand> | undefined): boolean {
    return proto3.util.equals(RegisterAccountCommand, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.accounts.commands.RegisterAccountConfirmOtpCommand
 */
export class RegisterAccountConfirmOtpCommand extends Message<RegisterAccountConfirmOtpCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string phoneNumber = 1;
   */
  phoneNumber = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  constructor(data?: PartialMessage<RegisterAccountConfirmOtpCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.accounts.commands.RegisterAccountConfirmOtpCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phoneNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAccountConfirmOtpCommand {
    return new RegisterAccountConfirmOtpCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAccountConfirmOtpCommand {
    return new RegisterAccountConfirmOtpCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAccountConfirmOtpCommand {
    return new RegisterAccountConfirmOtpCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAccountConfirmOtpCommand | PlainMessage<RegisterAccountConfirmOtpCommand> | undefined, b: RegisterAccountConfirmOtpCommand | PlainMessage<RegisterAccountConfirmOtpCommand> | undefined): boolean {
    return proto3.util.equals(RegisterAccountConfirmOtpCommand, a, b);
  }
}

