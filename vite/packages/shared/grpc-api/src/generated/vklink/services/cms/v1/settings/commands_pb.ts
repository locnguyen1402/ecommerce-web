// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/cms/v1/settings/commands.proto (package vklink.cms.api.v1.settings.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { ApplicationSettingType } from "./enums_pb";

/**
 * @generated from message vklink.cms.api.v1.settings.commands.CreateSettingCommand
 */
export class CreateSettingCommand extends Message<CreateSettingCommand> {
  /**
   * @generated from field: vklink.cms.api.v1.settings.enums.ApplicationSettingType SettingType = 2;
   */
  SettingType = ApplicationSettingType.UNSPECIFIED;

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  constructor(data?: PartialMessage<CreateSettingCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.cms.api.v1.settings.commands.CreateSettingCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "SettingType", kind: "enum", T: proto3.getEnumType(ApplicationSettingType) },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSettingCommand {
    return new CreateSettingCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSettingCommand {
    return new CreateSettingCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSettingCommand {
    return new CreateSettingCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSettingCommand | PlainMessage<CreateSettingCommand> | undefined, b: CreateSettingCommand | PlainMessage<CreateSettingCommand> | undefined): boolean {
    return proto3.util.equals(CreateSettingCommand, a, b);
  }
}

/**
 * @generated from message vklink.cms.api.v1.settings.commands.UpdateSettingCommand
 */
export class UpdateSettingCommand extends Message<UpdateSettingCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  constructor(data?: PartialMessage<UpdateSettingCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.cms.api.v1.settings.commands.UpdateSettingCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSettingCommand {
    return new UpdateSettingCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSettingCommand {
    return new UpdateSettingCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSettingCommand {
    return new UpdateSettingCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSettingCommand | PlainMessage<UpdateSettingCommand> | undefined, b: UpdateSettingCommand | PlainMessage<UpdateSettingCommand> | undefined): boolean {
    return proto3.util.equals(UpdateSettingCommand, a, b);
  }
}

