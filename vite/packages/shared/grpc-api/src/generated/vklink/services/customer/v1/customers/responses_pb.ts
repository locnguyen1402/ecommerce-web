// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/customer/v1/customers/responses.proto (package vklink.customer.api.v1.customers.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Message, proto3, StringValue } from "@bufbuild/protobuf";
import { DateOnly } from "../../../../libs/protobuf/date_only_pb";
import { Gender } from "../../../../libs/common/enums/gender_pb";
import { UserStatus } from "../../../../libs/common/enums/user_status_pb";
import { DocumentInfoResponse } from "../../../../libs/common/responses/document_info_response_pb";
import { ContactResponse } from "../contacts/responses_pb";
import { ActorInfoResponse } from "../../../../libs/common/responses/actor_info_response_pb";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.customer.api.v1.customers.responses.CustomerResponse
 */
export class CustomerResponse extends Message<CustomerResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue userName = 2;
   */
  userName?: string;

  /**
   * @generated from field: string firstName = 3;
   */
  firstName = "";

  /**
   * @generated from field: google.protobuf.StringValue lastName = 4;
   */
  lastName?: string;

  /**
   * @generated from field: string fullName = 5;
   */
  fullName = "";

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 6;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 7;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 8;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 9;
   */
  email?: string;

  /**
   * @generated from field: vklink.grpc.enums.UserStatus status = 10;
   */
  status = UserStatus.UNSPECIFIED;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: google.protobuf.StringValue refUserId = 51;
   */
  refUserId?: string;

  /**
   * @generated from field: repeated vklink.common.responses.DocumentInfoResponse documents = 52;
   */
  documents: DocumentInfoResponse[] = [];

  /**
   * @generated from field: vklink.customer.api.v1.contacts.responses.ContactResponse contactDefault = 53;
   */
  contactDefault?: ContactResponse;

  /**
   * audit fields: from 63 to 70
   *
   * @generated from field: vklink.common.responses.ActorInfoResponse creator = 61;
   */
  creator?: ActorInfoResponse;

  /**
   * @generated from field: vklink.common.responses.ActorInfoResponse updater = 62;
   */
  updater?: ActorInfoResponse;

  constructor(data?: PartialMessage<CustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.CustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userName", kind: "message", T: StringValue },
    { no: 3, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lastName", kind: "message", T: StringValue },
    { no: 5, name: "fullName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "birthDate", kind: "message", T: DateOnly },
    { no: 7, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 8, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 9, name: "email", kind: "message", T: StringValue },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(UserStatus) },
    { no: 51, name: "refUserId", kind: "message", T: StringValue },
    { no: 52, name: "documents", kind: "message", T: DocumentInfoResponse, repeated: true },
    { no: 53, name: "contactDefault", kind: "message", T: ContactResponse },
    { no: 61, name: "creator", kind: "message", T: ActorInfoResponse },
    { no: 62, name: "updater", kind: "message", T: ActorInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerResponse {
    return new CustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerResponse {
    return new CustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerResponse {
    return new CustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerResponse | PlainMessage<CustomerResponse> | undefined, b: CustomerResponse | PlainMessage<CustomerResponse> | undefined): boolean {
    return proto3.util.equals(CustomerResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.SingleCustomerResponse
 */
export class SingleCustomerResponse extends Message<SingleCustomerResponse> {
  /**
   * @generated from field: vklink.customer.api.v1.customers.responses.CustomerResponse value = 1;
   */
  value?: CustomerResponse;

  constructor(data?: PartialMessage<SingleCustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.SingleCustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: CustomerResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleCustomerResponse {
    return new SingleCustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleCustomerResponse {
    return new SingleCustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleCustomerResponse {
    return new SingleCustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleCustomerResponse | PlainMessage<SingleCustomerResponse> | undefined, b: SingleCustomerResponse | PlainMessage<SingleCustomerResponse> | undefined): boolean {
    return proto3.util.equals(SingleCustomerResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.ListCustomersResponse
 */
export class ListCustomersResponse extends Message<ListCustomersResponse> {
  /**
   * @generated from field: repeated vklink.customer.api.v1.customers.responses.CustomerResponse value = 1;
   */
  value: CustomerResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListCustomersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.ListCustomersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: CustomerResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCustomersResponse {
    return new ListCustomersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCustomersResponse {
    return new ListCustomersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCustomersResponse {
    return new ListCustomersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCustomersResponse | PlainMessage<ListCustomersResponse> | undefined, b: ListCustomersResponse | PlainMessage<ListCustomersResponse> | undefined): boolean {
    return proto3.util.equals(ListCustomersResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.NewCustomersResponse
 */
export class NewCustomersResponse extends Message<NewCustomersResponse> {
  /**
   * @generated from field: string totalCustomers = 1;
   */
  totalCustomers = "";

  /**
   * @generated from field: repeated vklink.customer.api.v1.customers.responses.CustomerResponse topCustomers = 2;
   */
  topCustomers: CustomerResponse[] = [];

  constructor(data?: PartialMessage<NewCustomersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.NewCustomersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "totalCustomers", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "topCustomers", kind: "message", T: CustomerResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewCustomersResponse {
    return new NewCustomersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewCustomersResponse {
    return new NewCustomersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewCustomersResponse {
    return new NewCustomersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewCustomersResponse | PlainMessage<NewCustomersResponse> | undefined, b: NewCustomersResponse | PlainMessage<NewCustomersResponse> | undefined): boolean {
    return proto3.util.equals(NewCustomersResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.CustomerReportResponse
 */
export class CustomerReportResponse extends Message<CustomerReportResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string fullName = 2;
   */
  fullName = "";

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 3;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 4;
   */
  email?: string;

  /**
   * @generated from field: google.protobuf.StringValue address = 5;
   */
  address?: string;

  /**
   * @generated from field: google.protobuf.StringValue totalOrders = 6;
   */
  totalOrders?: string;

  /**
   * @generated from field: google.protobuf.StringValue totalSales = 7;
   */
  totalSales?: string;

  /**
   * @generated from field: vklink.grpc.enums.UserStatus status = 8;
   */
  status = UserStatus.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 9;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Int32Value age = 10;
   */
  age?: number;

  constructor(data?: PartialMessage<CustomerReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.CustomerReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fullName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 4, name: "email", kind: "message", T: StringValue },
    { no: 5, name: "address", kind: "message", T: StringValue },
    { no: 6, name: "totalOrders", kind: "message", T: StringValue },
    { no: 7, name: "totalSales", kind: "message", T: StringValue },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(UserStatus) },
    { no: 9, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 10, name: "age", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerReportResponse {
    return new CustomerReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerReportResponse {
    return new CustomerReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerReportResponse {
    return new CustomerReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerReportResponse | PlainMessage<CustomerReportResponse> | undefined, b: CustomerReportResponse | PlainMessage<CustomerReportResponse> | undefined): boolean {
    return proto3.util.equals(CustomerReportResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.ListCustomerReportsResponse
 */
export class ListCustomerReportsResponse extends Message<ListCustomerReportsResponse> {
  /**
   * @generated from field: repeated vklink.customer.api.v1.customers.responses.CustomerReportResponse value = 1;
   */
  value: CustomerReportResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListCustomerReportsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.ListCustomerReportsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: CustomerReportResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCustomerReportsResponse {
    return new ListCustomerReportsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCustomerReportsResponse {
    return new ListCustomerReportsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCustomerReportsResponse {
    return new ListCustomerReportsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCustomerReportsResponse | PlainMessage<ListCustomerReportsResponse> | undefined, b: ListCustomerReportsResponse | PlainMessage<ListCustomerReportsResponse> | undefined): boolean {
    return proto3.util.equals(ListCustomerReportsResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.ExportCustomerReportResponse
 */
export class ExportCustomerReportResponse extends Message<ExportCustomerReportResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<ExportCustomerReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.ExportCustomerReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportCustomerReportResponse {
    return new ExportCustomerReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportCustomerReportResponse {
    return new ExportCustomerReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportCustomerReportResponse {
    return new ExportCustomerReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportCustomerReportResponse | PlainMessage<ExportCustomerReportResponse> | undefined, b: ExportCustomerReportResponse | PlainMessage<ExportCustomerReportResponse> | undefined): boolean {
    return proto3.util.equals(ExportCustomerReportResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.CustomerInDashboardResponse
 */
export class CustomerInDashboardResponse extends Message<CustomerInDashboardResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string userName = 2;
   */
  userName = "";

  /**
   * @generated from field: string fullName = 3;
   */
  fullName = "";

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 4;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 5;
   */
  email?: string;

  /**
   * @generated from field: vklink.grpc.enums.UserStatus status = 6;
   */
  status = UserStatus.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 7;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 8;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: google.protobuf.StringValue refUserId = 51;
   */
  refUserId?: string;

  /**
   * @generated from field: vklink.common.responses.DocumentInfoResponse avatar = 52;
   */
  avatar?: DocumentInfoResponse;

  constructor(data?: PartialMessage<CustomerInDashboardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.CustomerInDashboardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fullName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 5, name: "email", kind: "message", T: StringValue },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(UserStatus) },
    { no: 7, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 8, name: "birthDate", kind: "message", T: DateOnly },
    { no: 51, name: "refUserId", kind: "message", T: StringValue },
    { no: 52, name: "avatar", kind: "message", T: DocumentInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerInDashboardResponse {
    return new CustomerInDashboardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerInDashboardResponse {
    return new CustomerInDashboardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerInDashboardResponse {
    return new CustomerInDashboardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerInDashboardResponse | PlainMessage<CustomerInDashboardResponse> | undefined, b: CustomerInDashboardResponse | PlainMessage<CustomerInDashboardResponse> | undefined): boolean {
    return proto3.util.equals(CustomerInDashboardResponse, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.responses.ListCustomerInDashboardResponse
 */
export class ListCustomerInDashboardResponse extends Message<ListCustomerInDashboardResponse> {
  /**
   * @generated from field: repeated vklink.customer.api.v1.customers.responses.CustomerInDashboardResponse value = 1;
   */
  value: CustomerInDashboardResponse[] = [];

  /**
   * @generated from field: int32 totalCustomer = 2;
   */
  totalCustomer = 0;

  constructor(data?: PartialMessage<ListCustomerInDashboardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.responses.ListCustomerInDashboardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: CustomerInDashboardResponse, repeated: true },
    { no: 2, name: "totalCustomer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCustomerInDashboardResponse {
    return new ListCustomerInDashboardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCustomerInDashboardResponse {
    return new ListCustomerInDashboardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCustomerInDashboardResponse {
    return new ListCustomerInDashboardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCustomerInDashboardResponse | PlainMessage<ListCustomerInDashboardResponse> | undefined, b: ListCustomerInDashboardResponse | PlainMessage<ListCustomerInDashboardResponse> | undefined): boolean {
    return proto3.util.equals(ListCustomerInDashboardResponse, a, b);
  }
}

