// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/catalog/v1/wards/responses.proto (package vklink.catalog.api.v1.wards.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.catalog.api.v1.wards.responses.WardResponse
 */
export class WardResponse extends Message<WardResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  /**
   * @generated from field: string zipCode = 4;
   */
  zipCode = "";

  constructor(data?: PartialMessage<WardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.wards.responses.WardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "zipCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WardResponse {
    return new WardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WardResponse {
    return new WardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WardResponse {
    return new WardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WardResponse | PlainMessage<WardResponse> | undefined, b: WardResponse | PlainMessage<WardResponse> | undefined): boolean {
    return proto3.util.equals(WardResponse, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.wards.responses.AdminWardResponse
 */
export class AdminWardResponse extends Message<AdminWardResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string wardName = 2;
   */
  wardName = "";

  /**
   * @generated from field: string wardCode = 3;
   */
  wardCode = "";

  /**
   * @generated from field: string districtName = 4;
   */
  districtName = "";

  /**
   * @generated from field: string districtCode = 5;
   */
  districtCode = "";

  /**
   * @generated from field: string provinceName = 6;
   */
  provinceName = "";

  /**
   * @generated from field: string provinceCode = 7;
   */
  provinceCode = "";

  constructor(data?: PartialMessage<AdminWardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.wards.responses.AdminWardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wardName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "wardCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "districtName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "districtCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "provinceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "provinceCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminWardResponse {
    return new AdminWardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminWardResponse {
    return new AdminWardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminWardResponse {
    return new AdminWardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminWardResponse | PlainMessage<AdminWardResponse> | undefined, b: AdminWardResponse | PlainMessage<AdminWardResponse> | undefined): boolean {
    return proto3.util.equals(AdminWardResponse, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.wards.responses.SingleWardResponse
 */
export class SingleWardResponse extends Message<SingleWardResponse> {
  /**
   * @generated from field: vklink.catalog.api.v1.wards.responses.WardResponse value = 1;
   */
  value?: WardResponse;

  constructor(data?: PartialMessage<SingleWardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.wards.responses.SingleWardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: WardResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleWardResponse {
    return new SingleWardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleWardResponse {
    return new SingleWardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleWardResponse {
    return new SingleWardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleWardResponse | PlainMessage<SingleWardResponse> | undefined, b: SingleWardResponse | PlainMessage<SingleWardResponse> | undefined): boolean {
    return proto3.util.equals(SingleWardResponse, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.wards.responses.ListWardsResponse
 */
export class ListWardsResponse extends Message<ListWardsResponse> {
  /**
   * @generated from field: repeated vklink.catalog.api.v1.wards.responses.WardResponse value = 1;
   */
  value: WardResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListWardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.wards.responses.ListWardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: WardResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWardsResponse {
    return new ListWardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWardsResponse {
    return new ListWardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWardsResponse {
    return new ListWardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWardsResponse | PlainMessage<ListWardsResponse> | undefined, b: ListWardsResponse | PlainMessage<ListWardsResponse> | undefined): boolean {
    return proto3.util.equals(ListWardsResponse, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.wards.responses.ListAdminWardsResponse
 */
export class ListAdminWardsResponse extends Message<ListAdminWardsResponse> {
  /**
   * @generated from field: repeated vklink.catalog.api.v1.wards.responses.AdminWardResponse value = 1;
   */
  value: AdminWardResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListAdminWardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.wards.responses.ListAdminWardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: AdminWardResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAdminWardsResponse {
    return new ListAdminWardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAdminWardsResponse {
    return new ListAdminWardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAdminWardsResponse {
    return new ListAdminWardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAdminWardsResponse | PlainMessage<ListAdminWardsResponse> | undefined, b: ListAdminWardsResponse | PlainMessage<ListAdminWardsResponse> | undefined): boolean {
    return proto3.util.equals(ListAdminWardsResponse, a, b);
  }
}

