// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/customer/v1/customers/commands.proto (package vklink.customer.api.v1.customers.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { SocialProvider } from "../../../../libs/common/enums/social_provider_pb";
import { DateOnly } from "../../../../libs/protobuf/date_only_pb";
import { Gender } from "../../../../libs/common/enums/gender_pb";
import { CreateDocumentInfoCommand } from "../../../../libs/common/commands/create_document_info_command_pb";

/**
 * @generated from message vklink.customer.api.v1.customers.commands.CreateSocialCustomerCommand
 */
export class CreateSocialCustomerCommand extends Message<CreateSocialCustomerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string assertion = 1;
   */
  assertion = "";

  /**
   * @generated from field: vklink.grpc.enums.SocialProvider socialProvider = 2;
   */
  socialProvider = SocialProvider.UNSPECIFIED;

  constructor(data?: PartialMessage<CreateSocialCustomerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.CreateSocialCustomerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assertion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "socialProvider", kind: "enum", T: proto3.getEnumType(SocialProvider) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSocialCustomerCommand {
    return new CreateSocialCustomerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSocialCustomerCommand {
    return new CreateSocialCustomerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSocialCustomerCommand {
    return new CreateSocialCustomerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSocialCustomerCommand | PlainMessage<CreateSocialCustomerCommand> | undefined, b: CreateSocialCustomerCommand | PlainMessage<CreateSocialCustomerCommand> | undefined): boolean {
    return proto3.util.equals(CreateSocialCustomerCommand, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.commands.UpdateCustomerCommand
 */
export class UpdateCustomerCommand extends Message<UpdateCustomerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue firstName = 2;
   */
  firstName?: string;

  /**
   * @generated from field: google.protobuf.StringValue lastName = 3;
   */
  lastName?: string;

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 4;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 5;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 6;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 7;
   */
  email?: string;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.common.commands.CreateDocumentInfoCommand documents = 51;
   */
  documents: CreateDocumentInfoCommand[] = [];

  constructor(data?: PartialMessage<UpdateCustomerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.UpdateCustomerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "firstName", kind: "message", T: StringValue },
    { no: 3, name: "lastName", kind: "message", T: StringValue },
    { no: 4, name: "birthDate", kind: "message", T: DateOnly },
    { no: 5, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 6, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 7, name: "email", kind: "message", T: StringValue },
    { no: 51, name: "documents", kind: "message", T: CreateDocumentInfoCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCustomerCommand {
    return new UpdateCustomerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCustomerCommand {
    return new UpdateCustomerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCustomerCommand {
    return new UpdateCustomerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCustomerCommand | PlainMessage<UpdateCustomerCommand> | undefined, b: UpdateCustomerCommand | PlainMessage<UpdateCustomerCommand> | undefined): boolean {
    return proto3.util.equals(UpdateCustomerCommand, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.commands.DeleteCustomerCommand
 */
export class DeleteCustomerCommand extends Message<DeleteCustomerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteCustomerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.DeleteCustomerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCustomerCommand {
    return new DeleteCustomerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCustomerCommand {
    return new DeleteCustomerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCustomerCommand {
    return new DeleteCustomerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCustomerCommand | PlainMessage<DeleteCustomerCommand> | undefined, b: DeleteCustomerCommand | PlainMessage<DeleteCustomerCommand> | undefined): boolean {
    return proto3.util.equals(DeleteCustomerCommand, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.commands.UpdateAvatarCommand
 */
export class UpdateAvatarCommand extends Message<UpdateAvatarCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.common.commands.CreateDocumentInfoCommand avatars = 51;
   */
  avatars: CreateDocumentInfoCommand[] = [];

  constructor(data?: PartialMessage<UpdateAvatarCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.UpdateAvatarCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 51, name: "avatars", kind: "message", T: CreateDocumentInfoCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAvatarCommand {
    return new UpdateAvatarCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAvatarCommand {
    return new UpdateAvatarCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAvatarCommand {
    return new UpdateAvatarCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAvatarCommand | PlainMessage<UpdateAvatarCommand> | undefined, b: UpdateAvatarCommand | PlainMessage<UpdateAvatarCommand> | undefined): boolean {
    return proto3.util.equals(UpdateAvatarCommand, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.commands.AdminCreateCustomerCommand
 */
export class AdminCreateCustomerCommand extends Message<AdminCreateCustomerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string userName = 2;
   */
  userName = "";

  /**
   * @generated from field: string firstName = 3;
   */
  firstName = "";

  /**
   * @generated from field: google.protobuf.StringValue lastName = 4;
   */
  lastName?: string;

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 5;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 6;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 7;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 8;
   */
  email?: string;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.common.commands.CreateDocumentInfoCommand documents = 51;
   */
  documents: CreateDocumentInfoCommand[] = [];

  constructor(data?: PartialMessage<AdminCreateCustomerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.AdminCreateCustomerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lastName", kind: "message", T: StringValue },
    { no: 5, name: "birthDate", kind: "message", T: DateOnly },
    { no: 6, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 7, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 8, name: "email", kind: "message", T: StringValue },
    { no: 51, name: "documents", kind: "message", T: CreateDocumentInfoCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminCreateCustomerCommand {
    return new AdminCreateCustomerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminCreateCustomerCommand {
    return new AdminCreateCustomerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminCreateCustomerCommand {
    return new AdminCreateCustomerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AdminCreateCustomerCommand | PlainMessage<AdminCreateCustomerCommand> | undefined, b: AdminCreateCustomerCommand | PlainMessage<AdminCreateCustomerCommand> | undefined): boolean {
    return proto3.util.equals(AdminCreateCustomerCommand, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.commands.AdminUpdateCustomerCommand
 */
export class AdminUpdateCustomerCommand extends Message<AdminUpdateCustomerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue firstName = 2;
   */
  firstName?: string;

  /**
   * @generated from field: google.protobuf.StringValue lastName = 3;
   */
  lastName?: string;

  /**
   * @generated from field: vklink.protobuf.DateOnly birthDate = 4;
   */
  birthDate?: DateOnly;

  /**
   * @generated from field: vklink.grpc.enums.Gender gender = 5;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.StringValue phoneNumber = 6;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 7;
   */
  email?: string;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.common.commands.CreateDocumentInfoCommand documents = 51;
   */
  documents: CreateDocumentInfoCommand[] = [];

  constructor(data?: PartialMessage<AdminUpdateCustomerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.AdminUpdateCustomerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "firstName", kind: "message", T: StringValue },
    { no: 3, name: "lastName", kind: "message", T: StringValue },
    { no: 4, name: "birthDate", kind: "message", T: DateOnly },
    { no: 5, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 6, name: "phoneNumber", kind: "message", T: StringValue },
    { no: 7, name: "email", kind: "message", T: StringValue },
    { no: 51, name: "documents", kind: "message", T: CreateDocumentInfoCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminUpdateCustomerCommand {
    return new AdminUpdateCustomerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminUpdateCustomerCommand {
    return new AdminUpdateCustomerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminUpdateCustomerCommand {
    return new AdminUpdateCustomerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AdminUpdateCustomerCommand | PlainMessage<AdminUpdateCustomerCommand> | undefined, b: AdminUpdateCustomerCommand | PlainMessage<AdminUpdateCustomerCommand> | undefined): boolean {
    return proto3.util.equals(AdminUpdateCustomerCommand, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.commands.CreateCustomerCommand
 */
export class CreateCustomerCommand extends Message<CreateCustomerCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string phoneNumber = 1;
   */
  phoneNumber = "";

  constructor(data?: PartialMessage<CreateCustomerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.CreateCustomerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phoneNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCustomerCommand {
    return new CreateCustomerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCustomerCommand {
    return new CreateCustomerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCustomerCommand {
    return new CreateCustomerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCustomerCommand | PlainMessage<CreateCustomerCommand> | undefined, b: CreateCustomerCommand | PlainMessage<CreateCustomerCommand> | undefined): boolean {
    return proto3.util.equals(CreateCustomerCommand, a, b);
  }
}

/**
 * @generated from message vklink.customer.api.v1.customers.commands.CreateCustomerConfirmOtpCommand
 */
export class CreateCustomerConfirmOtpCommand extends Message<CreateCustomerConfirmOtpCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string phoneNumber = 1;
   */
  phoneNumber = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  constructor(data?: PartialMessage<CreateCustomerConfirmOtpCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.customer.api.v1.customers.commands.CreateCustomerConfirmOtpCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phoneNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCustomerConfirmOtpCommand {
    return new CreateCustomerConfirmOtpCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCustomerConfirmOtpCommand {
    return new CreateCustomerConfirmOtpCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCustomerConfirmOtpCommand {
    return new CreateCustomerConfirmOtpCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCustomerConfirmOtpCommand | PlainMessage<CreateCustomerConfirmOtpCommand> | undefined, b: CreateCustomerConfirmOtpCommand | PlainMessage<CreateCustomerConfirmOtpCommand> | undefined): boolean {
    return proto3.util.equals(CreateCustomerConfirmOtpCommand, a, b);
  }
}

