// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/blog/v1/posts/responses.proto (package vklink.blog.api.v1.posts.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PostStatus, PostType } from "./enums_pb";
import { CategoryInfoResponse } from "../categories/responses_pb";
import { DocumentResponse } from "../../../../libs/common/responses/document_response_pb";
import { ActorInfoResponse } from "../../../../libs/common/responses/actor_info_response_pb";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.blog.api.v1.posts.responses.PostResponse
 */
export class PostResponse extends Message<PostResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string excerpt = 4;
   */
  excerpt = "";

  /**
   * @generated from field: string content = 5;
   */
  content = "";

  /**
   * @generated from field: repeated string tagSlugs = 6;
   */
  tagSlugs: string[] = [];

  /**
   * @generated from field: int32 viewCount = 7;
   */
  viewCount = 0;

  /**
   * @generated from field: int32 commentCount = 8;
   */
  commentCount = 0;

  /**
   * @generated from field: int32 reactionCount = 9;
   */
  reactionCount = 0;

  /**
   * @generated from field: map<string, int32> reactionCounts = 10;
   */
  reactionCounts: { [key: string]: number } = {};

  /**
   * @generated from field: vklink.blog.api.v1.posts.responses.PostStatus status = 11;
   */
  status = PostStatus.UNSPECIFIED;

  /**
   * @generated from field: vklink.blog.api.v1.posts.responses.PostType type = 12;
   */
  type = PostType.UNSPECIFIED;

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: vklink.blog.api.v1.categories.responses.CategoryInfoResponse category = 51;
   */
  category?: CategoryInfoResponse;

  /**
   * @generated from field: repeated vklink.common.responses.DocumentResponse documents = 52;
   */
  documents: DocumentResponse[] = [];

  /**
   * audit fields: from 63 to 70
   *
   * @generated from field: vklink.common.responses.ActorInfoResponse creator = 61;
   */
  creator?: ActorInfoResponse;

  /**
   * @generated from field: vklink.common.responses.ActorInfoResponse updater = 62;
   */
  updater?: ActorInfoResponse;

  constructor(data?: PartialMessage<PostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.responses.PostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "excerpt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tagSlugs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "viewCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "commentCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "reactionCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "reactionCounts", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 11, name: "status", kind: "enum", T: proto3.getEnumType(PostStatus) },
    { no: 12, name: "type", kind: "enum", T: proto3.getEnumType(PostType) },
    { no: 51, name: "category", kind: "message", T: CategoryInfoResponse },
    { no: 52, name: "documents", kind: "message", T: DocumentResponse, repeated: true },
    { no: 61, name: "creator", kind: "message", T: ActorInfoResponse },
    { no: 62, name: "updater", kind: "message", T: ActorInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostResponse {
    return new PostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostResponse {
    return new PostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostResponse {
    return new PostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostResponse | PlainMessage<PostResponse> | undefined, b: PostResponse | PlainMessage<PostResponse> | undefined): boolean {
    return proto3.util.equals(PostResponse, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.responses.SinglePostResponse
 */
export class SinglePostResponse extends Message<SinglePostResponse> {
  /**
   * @generated from field: vklink.blog.api.v1.posts.responses.PostResponse value = 1;
   */
  value?: PostResponse;

  constructor(data?: PartialMessage<SinglePostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.responses.SinglePostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: PostResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinglePostResponse {
    return new SinglePostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinglePostResponse {
    return new SinglePostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinglePostResponse {
    return new SinglePostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SinglePostResponse | PlainMessage<SinglePostResponse> | undefined, b: SinglePostResponse | PlainMessage<SinglePostResponse> | undefined): boolean {
    return proto3.util.equals(SinglePostResponse, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.responses.ListPostsResponse
 */
export class ListPostsResponse extends Message<ListPostsResponse> {
  /**
   * @generated from field: repeated vklink.blog.api.v1.posts.responses.PostResponse value = 1;
   */
  value: PostResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListPostsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.responses.ListPostsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: PostResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPostsResponse {
    return new ListPostsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPostsResponse {
    return new ListPostsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPostsResponse {
    return new ListPostsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPostsResponse | PlainMessage<ListPostsResponse> | undefined, b: ListPostsResponse | PlainMessage<ListPostsResponse> | undefined): boolean {
    return proto3.util.equals(ListPostsResponse, a, b);
  }
}

