// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/blog/v1/posts/commands.proto (package vklink.blog.api.v1.posts.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PostType } from "./enums_pb";
import { CreateDocumentCommand } from "../../../../libs/common/commands/create_document_command_pb";

/**
 * @generated from message vklink.blog.api.v1.posts.commands.CreatePostCommand
 */
export class CreatePostCommand extends Message<CreatePostCommand> {
  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string excerpt = 4;
   */
  excerpt = "";

  /**
   * @generated from field: string content = 5;
   */
  content = "";

  /**
   * @generated from field: repeated string tagSlugs = 6;
   */
  tagSlugs: string[] = [];

  /**
   * @generated from field: vklink.blog.api.v1.posts.responses.PostType type = 7;
   */
  type = PostType.UNSPECIFIED;

  /**
   * @generated from field: string categoryId = 51;
   */
  categoryId = "";

  /**
   * @generated from field: repeated vklink.common.commands.CreateDocumentCommand documents = 52;
   */
  documents: CreateDocumentCommand[] = [];

  constructor(data?: PartialMessage<CreatePostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.CreatePostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "excerpt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tagSlugs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "type", kind: "enum", T: proto3.getEnumType(PostType) },
    { no: 51, name: "categoryId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 52, name: "documents", kind: "message", T: CreateDocumentCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePostCommand {
    return new CreatePostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePostCommand {
    return new CreatePostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePostCommand {
    return new CreatePostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePostCommand | PlainMessage<CreatePostCommand> | undefined, b: CreatePostCommand | PlainMessage<CreatePostCommand> | undefined): boolean {
    return proto3.util.equals(CreatePostCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.commands.UpdatePostCommand
 */
export class UpdatePostCommand extends Message<UpdatePostCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string excerpt = 4;
   */
  excerpt = "";

  /**
   * @generated from field: string content = 5;
   */
  content = "";

  /**
   * @generated from field: repeated string tagSlugs = 6;
   */
  tagSlugs: string[] = [];

  /**
   * @generated from field: vklink.blog.api.v1.posts.responses.PostType type = 7;
   */
  type = PostType.UNSPECIFIED;

  /**
   * @generated from field: string categoryId = 51;
   */
  categoryId = "";

  /**
   * @generated from field: repeated vklink.common.commands.CreateDocumentCommand documents = 52;
   */
  documents: CreateDocumentCommand[] = [];

  constructor(data?: PartialMessage<UpdatePostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.UpdatePostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "excerpt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tagSlugs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "type", kind: "enum", T: proto3.getEnumType(PostType) },
    { no: 51, name: "categoryId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 52, name: "documents", kind: "message", T: CreateDocumentCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePostCommand {
    return new UpdatePostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePostCommand {
    return new UpdatePostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePostCommand {
    return new UpdatePostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePostCommand | PlainMessage<UpdatePostCommand> | undefined, b: UpdatePostCommand | PlainMessage<UpdatePostCommand> | undefined): boolean {
    return proto3.util.equals(UpdatePostCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.commands.PublishPostCommand
 */
export class PublishPostCommand extends Message<PublishPostCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string remark = 3;
   */
  remark = "";

  constructor(data?: PartialMessage<PublishPostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.PublishPostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "remark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishPostCommand {
    return new PublishPostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishPostCommand {
    return new PublishPostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishPostCommand {
    return new PublishPostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: PublishPostCommand | PlainMessage<PublishPostCommand> | undefined, b: PublishPostCommand | PlainMessage<PublishPostCommand> | undefined): boolean {
    return proto3.util.equals(PublishPostCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.commands.UnpublishPostCommand
 */
export class UnpublishPostCommand extends Message<UnpublishPostCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string remark = 3;
   */
  remark = "";

  constructor(data?: PartialMessage<UnpublishPostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.UnpublishPostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "remark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpublishPostCommand {
    return new UnpublishPostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpublishPostCommand {
    return new UnpublishPostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpublishPostCommand {
    return new UnpublishPostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UnpublishPostCommand | PlainMessage<UnpublishPostCommand> | undefined, b: UnpublishPostCommand | PlainMessage<UnpublishPostCommand> | undefined): boolean {
    return proto3.util.equals(UnpublishPostCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.commands.ArchivePostCommand
 */
export class ArchivePostCommand extends Message<ArchivePostCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string remark = 3;
   */
  remark = "";

  constructor(data?: PartialMessage<ArchivePostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.ArchivePostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "remark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchivePostCommand {
    return new ArchivePostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchivePostCommand {
    return new ArchivePostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchivePostCommand {
    return new ArchivePostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ArchivePostCommand | PlainMessage<ArchivePostCommand> | undefined, b: ArchivePostCommand | PlainMessage<ArchivePostCommand> | undefined): boolean {
    return proto3.util.equals(ArchivePostCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.commands.DeletePostCommand
 */
export class DeletePostCommand extends Message<DeletePostCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeletePostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.DeletePostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePostCommand {
    return new DeletePostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePostCommand {
    return new DeletePostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePostCommand {
    return new DeletePostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePostCommand | PlainMessage<DeletePostCommand> | undefined, b: DeletePostCommand | PlainMessage<DeletePostCommand> | undefined): boolean {
    return proto3.util.equals(DeletePostCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.commands.CreateCommentCommand
 */
export class CreateCommentCommand extends Message<CreateCommentCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<CreateCommentCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.CreateCommentCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCommentCommand {
    return new CreateCommentCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCommentCommand {
    return new CreateCommentCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCommentCommand {
    return new CreateCommentCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCommentCommand | PlainMessage<CreateCommentCommand> | undefined, b: CreateCommentCommand | PlainMessage<CreateCommentCommand> | undefined): boolean {
    return proto3.util.equals(CreateCommentCommand, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.posts.commands.ReactToPostCommand
 */
export class ReactToPostCommand extends Message<ReactToPostCommand> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<ReactToPostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.posts.commands.ReactToPostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactToPostCommand {
    return new ReactToPostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactToPostCommand {
    return new ReactToPostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactToPostCommand {
    return new ReactToPostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ReactToPostCommand | PlainMessage<ReactToPostCommand> | undefined, b: ReactToPostCommand | PlainMessage<ReactToPostCommand> | undefined): boolean {
    return proto3.util.equals(ReactToPostCommand, a, b);
  }
}

