// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/blog/v1/comments/responses.proto (package vklink.blog.api.v1.comments.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { ActorInfoResponse } from "../../../../libs/common/responses/actor_info_response_pb";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.blog.api.v1.comments.responses.CommentResponse
 */
export class CommentResponse extends Message<CommentResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: int32 level = 3;
   */
  level = 0;

  /**
   * @generated from field: int32 reactionCount = 4;
   */
  reactionCount = 0;

  /**
   * @generated from field: map<string, int32> reactionCounts = 5;
   */
  reactionCounts: { [key: string]: number } = {};

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: google.protobuf.StringValue parentId = 51;
   */
  parentId?: string;

  /**
   * @generated from field: string postId = 52;
   */
  postId = "";

  /**
   * audit fields: from 63 to 70
   *
   * @generated from field: vklink.common.responses.ActorInfoResponse creator = 61;
   */
  creator?: ActorInfoResponse;

  /**
   * @generated from field: vklink.common.responses.ActorInfoResponse updater = 62;
   */
  updater?: ActorInfoResponse;

  constructor(data?: PartialMessage<CommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.comments.responses.CommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "reactionCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "reactionCounts", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 51, name: "parentId", kind: "message", T: StringValue },
    { no: 52, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 61, name: "creator", kind: "message", T: ActorInfoResponse },
    { no: 62, name: "updater", kind: "message", T: ActorInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommentResponse {
    return new CommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommentResponse {
    return new CommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommentResponse {
    return new CommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CommentResponse | PlainMessage<CommentResponse> | undefined, b: CommentResponse | PlainMessage<CommentResponse> | undefined): boolean {
    return proto3.util.equals(CommentResponse, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.comments.responses.SingleCommentResponse
 */
export class SingleCommentResponse extends Message<SingleCommentResponse> {
  /**
   * @generated from field: vklink.blog.api.v1.comments.responses.CommentResponse value = 1;
   */
  value?: CommentResponse;

  constructor(data?: PartialMessage<SingleCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.comments.responses.SingleCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: CommentResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleCommentResponse {
    return new SingleCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleCommentResponse {
    return new SingleCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleCommentResponse {
    return new SingleCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleCommentResponse | PlainMessage<SingleCommentResponse> | undefined, b: SingleCommentResponse | PlainMessage<SingleCommentResponse> | undefined): boolean {
    return proto3.util.equals(SingleCommentResponse, a, b);
  }
}

/**
 * @generated from message vklink.blog.api.v1.comments.responses.ListCommentsResponse
 */
export class ListCommentsResponse extends Message<ListCommentsResponse> {
  /**
   * @generated from field: repeated vklink.blog.api.v1.comments.responses.CommentResponse value = 1;
   */
  value: CommentResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListCommentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.blog.api.v1.comments.responses.ListCommentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: CommentResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCommentsResponse {
    return new ListCommentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCommentsResponse {
    return new ListCommentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCommentsResponse {
    return new ListCommentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCommentsResponse | PlainMessage<ListCommentsResponse> | undefined, b: ListCommentsResponse | PlainMessage<ListCommentsResponse> | undefined): boolean {
    return proto3.util.equals(ListCommentsResponse, a, b);
  }
}

