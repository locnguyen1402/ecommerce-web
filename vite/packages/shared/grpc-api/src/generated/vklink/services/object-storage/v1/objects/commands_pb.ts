// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/object-storage/v1/objects/commands.proto (package vklink.objectstorage.api.v1.objects.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue, UInt64Value } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.objectstorage.api.v1.objects.commands.ObjectMetadata
 */
export class ObjectMetadata extends Message<ObjectMetadata> {
  /**
   * original file name
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * file path
   *
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * mime type
   *
   * @generated from field: string contentType = 4;
   */
  contentType = "";

  /**
   * file size in bytes
   *
   * @generated from field: int64 size = 5;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.StringValue title = 6;
   */
  title?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 7;
   */
  description?: string;

  /**
   * @generated from field: map<string, string> tags = 8;
   */
  tags: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ObjectMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.objectstorage.api.v1.objects.commands.ObjectMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contentType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "title", kind: "message", T: StringValue },
    { no: 7, name: "description", kind: "message", T: StringValue },
    { no: 8, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectMetadata {
    return new ObjectMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectMetadata {
    return new ObjectMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectMetadata {
    return new ObjectMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectMetadata | PlainMessage<ObjectMetadata> | undefined, b: ObjectMetadata | PlainMessage<ObjectMetadata> | undefined): boolean {
    return proto3.util.equals(ObjectMetadata, a, b);
  }
}

/**
 * @generated from message vklink.objectstorage.api.v1.objects.commands.UploadObjectCommand
 */
export class UploadObjectCommand extends Message<UploadObjectCommand> {
  /**
   * @generated from oneof vklink.objectstorage.api.v1.objects.commands.UploadObjectCommand.file
   */
  file: {
    /**
     * @generated from field: vklink.objectstorage.api.v1.objects.commands.ObjectMetadata metadata = 1;
     */
    value: ObjectMetadata;
    case: "metadata";
  } | {
    /**
     * @generated from field: bytes content = 2;
     */
    value: Uint8Array;
    case: "content";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadObjectCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.objectstorage.api.v1.objects.commands.UploadObjectCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ObjectMetadata, oneof: "file" },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "file" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadObjectCommand {
    return new UploadObjectCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadObjectCommand {
    return new UploadObjectCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadObjectCommand {
    return new UploadObjectCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UploadObjectCommand | PlainMessage<UploadObjectCommand> | undefined, b: UploadObjectCommand | PlainMessage<UploadObjectCommand> | undefined): boolean {
    return proto3.util.equals(UploadObjectCommand, a, b);
  }
}

/**
 * @generated from message vklink.objectstorage.api.v1.objects.commands.UpdateObjectInfoCommand
 */
export class UpdateObjectInfoCommand extends Message<UpdateObjectInfoCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue title = 3;
   */
  title?: string;

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  /**
   * @generated from field: map<string, string> tags = 5;
   */
  tags: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateObjectInfoCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.objectstorage.api.v1.objects.commands.UpdateObjectInfoCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "title", kind: "message", T: StringValue },
    { no: 4, name: "description", kind: "message", T: StringValue },
    { no: 5, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateObjectInfoCommand {
    return new UpdateObjectInfoCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateObjectInfoCommand {
    return new UpdateObjectInfoCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateObjectInfoCommand {
    return new UpdateObjectInfoCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateObjectInfoCommand | PlainMessage<UpdateObjectInfoCommand> | undefined, b: UpdateObjectInfoCommand | PlainMessage<UpdateObjectInfoCommand> | undefined): boolean {
    return proto3.util.equals(UpdateObjectInfoCommand, a, b);
  }
}

/**
 * @generated from message vklink.objectstorage.api.v1.objects.commands.DeleteObjectCommand
 */
export class DeleteObjectCommand extends Message<DeleteObjectCommand> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<DeleteObjectCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.objectstorage.api.v1.objects.commands.DeleteObjectCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectCommand {
    return new DeleteObjectCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectCommand {
    return new DeleteObjectCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectCommand {
    return new DeleteObjectCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectCommand | PlainMessage<DeleteObjectCommand> | undefined, b: DeleteObjectCommand | PlainMessage<DeleteObjectCommand> | undefined): boolean {
    return proto3.util.equals(DeleteObjectCommand, a, b);
  }
}

/**
 * @generated from message vklink.objectstorage.api.v1.objects.commands.PresignedUrlCommand
 */
export class PresignedUrlCommand extends Message<PresignedUrlCommand> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: google.protobuf.UInt64Value expirationSeconds = 3;
   */
  expirationSeconds?: bigint;

  constructor(data?: PartialMessage<PresignedUrlCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.objectstorage.api.v1.objects.commands.PresignedUrlCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expirationSeconds", kind: "message", T: UInt64Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PresignedUrlCommand {
    return new PresignedUrlCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PresignedUrlCommand {
    return new PresignedUrlCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PresignedUrlCommand {
    return new PresignedUrlCommand().fromJsonString(jsonString, options);
  }

  static equals(a: PresignedUrlCommand | PlainMessage<PresignedUrlCommand> | undefined, b: PresignedUrlCommand | PlainMessage<PresignedUrlCommand> | undefined): boolean {
    return proto3.util.equals(PresignedUrlCommand, a, b);
  }
}

/**
 * @generated from message vklink.objectstorage.api.v1.objects.commands.PresignedUrlsCommand
 */
export class PresignedUrlsCommand extends Message<PresignedUrlsCommand> {
  /**
   * @generated from field: repeated vklink.objectstorage.api.v1.objects.commands.PresignedUrlCommand request = 1;
   */
  request: PresignedUrlCommand[] = [];

  constructor(data?: PartialMessage<PresignedUrlsCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.objectstorage.api.v1.objects.commands.PresignedUrlsCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: PresignedUrlCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PresignedUrlsCommand {
    return new PresignedUrlsCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PresignedUrlsCommand {
    return new PresignedUrlsCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PresignedUrlsCommand {
    return new PresignedUrlsCommand().fromJsonString(jsonString, options);
  }

  static equals(a: PresignedUrlsCommand | PlainMessage<PresignedUrlsCommand> | undefined, b: PresignedUrlsCommand | PlainMessage<PresignedUrlsCommand> | undefined): boolean {
    return proto3.util.equals(PresignedUrlsCommand, a, b);
  }
}

