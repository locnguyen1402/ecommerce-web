// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/store/v1/partners/responses.proto (package vklink.store.api.v1.partners.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { ActorInfoResponse } from "../../../../libs/common/responses/actor_info_response_pb";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.store.api.v1.partners.responses.PartnerResponse
 */
export class PartnerResponse extends Message<PartnerResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  /**
   * audit fields: from 63 to 70
   *
   * @generated from field: vklink.common.responses.ActorInfoResponse creator = 61;
   */
  creator?: ActorInfoResponse;

  /**
   * @generated from field: vklink.common.responses.ActorInfoResponse updater = 62;
   */
  updater?: ActorInfoResponse;

  constructor(data?: PartialMessage<PartnerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.partners.responses.PartnerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "message", T: StringValue },
    { no: 61, name: "creator", kind: "message", T: ActorInfoResponse },
    { no: 62, name: "updater", kind: "message", T: ActorInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartnerResponse {
    return new PartnerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartnerResponse {
    return new PartnerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartnerResponse {
    return new PartnerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PartnerResponse | PlainMessage<PartnerResponse> | undefined, b: PartnerResponse | PlainMessage<PartnerResponse> | undefined): boolean {
    return proto3.util.equals(PartnerResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.partners.responses.SinglePartnerResponse
 */
export class SinglePartnerResponse extends Message<SinglePartnerResponse> {
  /**
   * @generated from field: vklink.store.api.v1.partners.responses.PartnerResponse value = 1;
   */
  value?: PartnerResponse;

  constructor(data?: PartialMessage<SinglePartnerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.partners.responses.SinglePartnerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: PartnerResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinglePartnerResponse {
    return new SinglePartnerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinglePartnerResponse {
    return new SinglePartnerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinglePartnerResponse {
    return new SinglePartnerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SinglePartnerResponse | PlainMessage<SinglePartnerResponse> | undefined, b: SinglePartnerResponse | PlainMessage<SinglePartnerResponse> | undefined): boolean {
    return proto3.util.equals(SinglePartnerResponse, a, b);
  }
}

/**
 * @generated from message vklink.store.api.v1.partners.responses.ListPartnersResponse
 */
export class ListPartnersResponse extends Message<ListPartnersResponse> {
  /**
   * @generated from field: repeated vklink.store.api.v1.partners.responses.PartnerResponse value = 1;
   */
  value: PartnerResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListPartnersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.store.api.v1.partners.responses.ListPartnersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: PartnerResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPartnersResponse {
    return new ListPartnersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPartnersResponse {
    return new ListPartnersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPartnersResponse {
    return new ListPartnersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPartnersResponse | PlainMessage<ListPartnersResponse> | undefined, b: ListPartnersResponse | PlainMessage<ListPartnersResponse> | undefined): boolean {
    return proto3.util.equals(ListPartnersResponse, a, b);
  }
}

