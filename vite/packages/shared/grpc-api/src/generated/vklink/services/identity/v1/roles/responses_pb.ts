// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/identity/v1/roles/responses.proto (package vklink.identity.api.v1.roles.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.identity.api.v1.roles.responses.RoleResponse
 */
export class RoleResponse extends Message<RoleResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  /**
   * @generated from field: bool isPredefined = 4;
   */
  isPredefined = false;

  /**
   * @generated from field: bool isEnabled = 5;
   */
  isEnabled = false;

  /**
   * @generated from field: repeated string permissions = 6;
   */
  permissions: string[] = [];

  constructor(data?: PartialMessage<RoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.responses.RoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
    { no: 4, name: "isPredefined", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "isEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleResponse {
    return new RoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleResponse {
    return new RoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleResponse {
    return new RoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleResponse | PlainMessage<RoleResponse> | undefined, b: RoleResponse | PlainMessage<RoleResponse> | undefined): boolean {
    return proto3.util.equals(RoleResponse, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.roles.responses.SingleRoleResponse
 */
export class SingleRoleResponse extends Message<SingleRoleResponse> {
  /**
   * @generated from field: vklink.identity.api.v1.roles.responses.RoleResponse value = 1;
   */
  value?: RoleResponse;

  constructor(data?: PartialMessage<SingleRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.responses.SingleRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: RoleResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleRoleResponse {
    return new SingleRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleRoleResponse {
    return new SingleRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleRoleResponse {
    return new SingleRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleRoleResponse | PlainMessage<SingleRoleResponse> | undefined, b: SingleRoleResponse | PlainMessage<SingleRoleResponse> | undefined): boolean {
    return proto3.util.equals(SingleRoleResponse, a, b);
  }
}

/**
 * @generated from message vklink.identity.api.v1.roles.responses.ListRolesResponse
 */
export class ListRolesResponse extends Message<ListRolesResponse> {
  /**
   * @generated from field: repeated vklink.identity.api.v1.roles.responses.RoleResponse value = 1;
   */
  value: RoleResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.identity.api.v1.roles.responses.ListRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: RoleResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesResponse | PlainMessage<ListRolesResponse> | undefined, b: ListRolesResponse | PlainMessage<ListRolesResponse> | undefined): boolean {
    return proto3.util.equals(ListRolesResponse, a, b);
  }
}

