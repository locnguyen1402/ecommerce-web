// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/catalog/v1/banks/commands.proto (package vklink.catalog.api.v1.banks.commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message vklink.catalog.api.v1.banks.commands.CreateBankCommand
 */
export class CreateBankCommand extends Message<CreateBankCommand> {
  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string abbr = 4;
   */
  abbr = "";

  /**
   * @generated from field: string notes = 5;
   */
  notes = "";

  constructor(data?: PartialMessage<CreateBankCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.banks.commands.CreateBankCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "abbr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBankCommand {
    return new CreateBankCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBankCommand {
    return new CreateBankCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBankCommand {
    return new CreateBankCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBankCommand | PlainMessage<CreateBankCommand> | undefined, b: CreateBankCommand | PlainMessage<CreateBankCommand> | undefined): boolean {
    return proto3.util.equals(CreateBankCommand, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.banks.commands.UpdateBankCommand
 */
export class UpdateBankCommand extends Message<UpdateBankCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string abbr = 4;
   */
  abbr = "";

  /**
   * @generated from field: string notes = 5;
   */
  notes = "";

  constructor(data?: PartialMessage<UpdateBankCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.banks.commands.UpdateBankCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "abbr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBankCommand {
    return new UpdateBankCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBankCommand {
    return new UpdateBankCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBankCommand {
    return new UpdateBankCommand().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBankCommand | PlainMessage<UpdateBankCommand> | undefined, b: UpdateBankCommand | PlainMessage<UpdateBankCommand> | undefined): boolean {
    return proto3.util.equals(UpdateBankCommand, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.banks.commands.DisableBankCommand
 */
export class DisableBankCommand extends Message<DisableBankCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string notes = 2;
   */
  notes = "";

  constructor(data?: PartialMessage<DisableBankCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.banks.commands.DisableBankCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableBankCommand {
    return new DisableBankCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableBankCommand {
    return new DisableBankCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableBankCommand {
    return new DisableBankCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DisableBankCommand | PlainMessage<DisableBankCommand> | undefined, b: DisableBankCommand | PlainMessage<DisableBankCommand> | undefined): boolean {
    return proto3.util.equals(DisableBankCommand, a, b);
  }
}

/**
 * @generated from message vklink.catalog.api.v1.banks.commands.EnableBankCommand
 */
export class EnableBankCommand extends Message<EnableBankCommand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string notes = 2;
   */
  notes = "";

  constructor(data?: PartialMessage<EnableBankCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.catalog.api.v1.banks.commands.EnableBankCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableBankCommand {
    return new EnableBankCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableBankCommand {
    return new EnableBankCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableBankCommand {
    return new EnableBankCommand().fromJsonString(jsonString, options);
  }

  static equals(a: EnableBankCommand | PlainMessage<EnableBankCommand> | undefined, b: EnableBankCommand | PlainMessage<EnableBankCommand> | undefined): boolean {
    return proto3.util.equals(EnableBankCommand, a, b);
  }
}

