// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file vklink/services/ordering/v1/carts/responses.proto (package vklink.ordering.api.v1.carts.responses, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { ProductType } from "../../../../libs/common/enums/product_type_pb";
import { UnitType } from "../../../../libs/common/enums/unit_type_pb";
import { DocumentResponse } from "../../../../libs/common/responses/document_response_pb";
import { PagingInfoResponse } from "../../../../libs/common/responses/paging_info_response_pb";

/**
 * @generated from message vklink.ordering.api.v1.carts.responses.CartItemSnapshotResponse
 */
export class CartItemSnapshotResponse extends Message<CartItemSnapshotResponse> {
  /**
   * @generated from field: string productId = 1;
   */
  productId = "";

  /**
   * @generated from field: google.protobuf.StringValue variantId = 2;
   */
  variantId?: string;

  /**
   * @generated from field: int32 quantity = 3;
   */
  quantity = 0;

  constructor(data?: PartialMessage<CartItemSnapshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.ordering.api.v1.carts.responses.CartItemSnapshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variantId", kind: "message", T: StringValue },
    { no: 3, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CartItemSnapshotResponse {
    return new CartItemSnapshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CartItemSnapshotResponse {
    return new CartItemSnapshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CartItemSnapshotResponse {
    return new CartItemSnapshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CartItemSnapshotResponse | PlainMessage<CartItemSnapshotResponse> | undefined, b: CartItemSnapshotResponse | PlainMessage<CartItemSnapshotResponse> | undefined): boolean {
    return proto3.util.equals(CartItemSnapshotResponse, a, b);
  }
}

/**
 * @generated from message vklink.ordering.api.v1.carts.responses.CartSnapshotResponse
 */
export class CartSnapshotResponse extends Message<CartSnapshotResponse> {
  /**
   * @generated from field: int32 totalItems = 1;
   */
  totalItems = 0;

  /**
   * @generated from field: repeated vklink.ordering.api.v1.carts.responses.CartItemSnapshotResponse items = 2;
   */
  items: CartItemSnapshotResponse[] = [];

  constructor(data?: PartialMessage<CartSnapshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.ordering.api.v1.carts.responses.CartSnapshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "totalItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: CartItemSnapshotResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CartSnapshotResponse {
    return new CartSnapshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CartSnapshotResponse {
    return new CartSnapshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CartSnapshotResponse {
    return new CartSnapshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CartSnapshotResponse | PlainMessage<CartSnapshotResponse> | undefined, b: CartSnapshotResponse | PlainMessage<CartSnapshotResponse> | undefined): boolean {
    return proto3.util.equals(CartSnapshotResponse, a, b);
  }
}

/**
 * @generated from message vklink.ordering.api.v1.carts.responses.CartBundleItemResponse
 */
export class CartBundleItemResponse extends Message<CartBundleItemResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string unitPrice = 4;
   */
  unitPrice = "";

  /**
   * @generated from field: string imageUrl = 5;
   */
  imageUrl = "";

  /**
   * @generated from field: int32 quantity = 6;
   */
  quantity = 0;

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 7;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: string totalPrice = 8;
   */
  totalPrice = "";

  constructor(data?: PartialMessage<CartBundleItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.ordering.api.v1.carts.responses.CartBundleItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "imageUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 8, name: "totalPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CartBundleItemResponse {
    return new CartBundleItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CartBundleItemResponse {
    return new CartBundleItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CartBundleItemResponse {
    return new CartBundleItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CartBundleItemResponse | PlainMessage<CartBundleItemResponse> | undefined, b: CartBundleItemResponse | PlainMessage<CartBundleItemResponse> | undefined): boolean {
    return proto3.util.equals(CartBundleItemResponse, a, b);
  }
}

/**
 * @generated from message vklink.ordering.api.v1.carts.responses.CartItemResponse
 */
export class CartItemResponse extends Message<CartItemResponse> {
  /**
   * data fields: from 1 to 50
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string productId = 2;
   */
  productId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string slug = 4;
   */
  slug = "";

  /**
   * @generated from field: int32 quantity = 5;
   */
  quantity = 0;

  /**
   * @generated from field: string unitPrice = 6;
   */
  unitPrice = "";

  /**
   * @generated from field: vklink.grpc.enums.ProductType type = 7;
   */
  type = ProductType.UNSPECIFIED;

  /**
   * @generated from field: vklink.grpc.enums.UnitType unit = 8;
   */
  unit = UnitType.UNSPECIFIED;

  /**
   * @generated from field: string totalPrice = 9;
   */
  totalPrice = "";

  /**
   * relationship fields: from 51 to 60
   *
   * @generated from field: repeated vklink.ordering.api.v1.carts.responses.CartBundleItemResponse bundle = 51;
   */
  bundle: CartBundleItemResponse[] = [];

  /**
   * @generated from field: repeated vklink.common.responses.DocumentResponse documents = 52;
   */
  documents: DocumentResponse[] = [];

  constructor(data?: PartialMessage<CartItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.ordering.api.v1.carts.responses.CartItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "productId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "unitPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 8, name: "unit", kind: "enum", T: proto3.getEnumType(UnitType) },
    { no: 9, name: "totalPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 51, name: "bundle", kind: "message", T: CartBundleItemResponse, repeated: true },
    { no: 52, name: "documents", kind: "message", T: DocumentResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CartItemResponse {
    return new CartItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CartItemResponse {
    return new CartItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CartItemResponse {
    return new CartItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CartItemResponse | PlainMessage<CartItemResponse> | undefined, b: CartItemResponse | PlainMessage<CartItemResponse> | undefined): boolean {
    return proto3.util.equals(CartItemResponse, a, b);
  }
}

/**
 * @generated from message vklink.ordering.api.v1.carts.responses.ListCartItemsResponse
 */
export class ListCartItemsResponse extends Message<ListCartItemsResponse> {
  /**
   * @generated from field: repeated vklink.ordering.api.v1.carts.responses.CartItemResponse value = 1;
   */
  value: CartItemResponse[] = [];

  /**
   * @generated from field: vklink.common.responses.PagingInfoResponse paging = 2;
   */
  paging?: PagingInfoResponse;

  constructor(data?: PartialMessage<ListCartItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vklink.ordering.api.v1.carts.responses.ListCartItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: CartItemResponse, repeated: true },
    { no: 2, name: "paging", kind: "message", T: PagingInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCartItemsResponse {
    return new ListCartItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCartItemsResponse {
    return new ListCartItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCartItemsResponse {
    return new ListCartItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCartItemsResponse | PlainMessage<ListCartItemsResponse> | undefined, b: ListCartItemsResponse | PlainMessage<ListCartItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListCartItemsResponse, a, b);
  }
}

